// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ssn/annotator/v1/annotator.proto

package annotator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DocumentAnnotator_AnnotateDocument_FullMethodName         = "/ssn.annotator.v1.DocumentAnnotator/AnnotateDocument"
	DocumentAnnotator_AnswerDocumentQuestion_FullMethodName   = "/ssn.annotator.v1.DocumentAnnotator/AnswerDocumentQuestion"
	DocumentAnnotator_GenerateStructuredAnswer_FullMethodName = "/ssn.annotator.v1.DocumentAnnotator/GenerateStructuredAnswer"
)

// DocumentAnnotatorClient is the client API for DocumentAnnotator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentAnnotatorClient interface {
	AnnotateDocument(ctx context.Context, in *DocumentAnnotatorRequest, opts ...grpc.CallOption) (*DocumentAnnotatorResponse, error)
	AnswerDocumentQuestion(ctx context.Context, in *DocumentQuestionRequest, opts ...grpc.CallOption) (*DocumentQuestionResponse, error)
	GenerateStructuredAnswer(ctx context.Context, in *GenerateStructuredAnswerRequest, opts ...grpc.CallOption) (DocumentAnnotator_GenerateStructuredAnswerClient, error)
}

type documentAnnotatorClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentAnnotatorClient(cc grpc.ClientConnInterface) DocumentAnnotatorClient {
	return &documentAnnotatorClient{cc}
}

func (c *documentAnnotatorClient) AnnotateDocument(ctx context.Context, in *DocumentAnnotatorRequest, opts ...grpc.CallOption) (*DocumentAnnotatorResponse, error) {
	out := new(DocumentAnnotatorResponse)
	err := c.cc.Invoke(ctx, DocumentAnnotator_AnnotateDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentAnnotatorClient) AnswerDocumentQuestion(ctx context.Context, in *DocumentQuestionRequest, opts ...grpc.CallOption) (*DocumentQuestionResponse, error) {
	out := new(DocumentQuestionResponse)
	err := c.cc.Invoke(ctx, DocumentAnnotator_AnswerDocumentQuestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentAnnotatorClient) GenerateStructuredAnswer(ctx context.Context, in *GenerateStructuredAnswerRequest, opts ...grpc.CallOption) (DocumentAnnotator_GenerateStructuredAnswerClient, error) {
	stream, err := c.cc.NewStream(ctx, &DocumentAnnotator_ServiceDesc.Streams[0], DocumentAnnotator_GenerateStructuredAnswer_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &documentAnnotatorGenerateStructuredAnswerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DocumentAnnotator_GenerateStructuredAnswerClient interface {
	Recv() (*GenerateStructuredAnswerResponse, error)
	grpc.ClientStream
}

type documentAnnotatorGenerateStructuredAnswerClient struct {
	grpc.ClientStream
}

func (x *documentAnnotatorGenerateStructuredAnswerClient) Recv() (*GenerateStructuredAnswerResponse, error) {
	m := new(GenerateStructuredAnswerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DocumentAnnotatorServer is the server API for DocumentAnnotator service.
// All implementations should embed UnimplementedDocumentAnnotatorServer
// for forward compatibility
type DocumentAnnotatorServer interface {
	AnnotateDocument(context.Context, *DocumentAnnotatorRequest) (*DocumentAnnotatorResponse, error)
	AnswerDocumentQuestion(context.Context, *DocumentQuestionRequest) (*DocumentQuestionResponse, error)
	GenerateStructuredAnswer(*GenerateStructuredAnswerRequest, DocumentAnnotator_GenerateStructuredAnswerServer) error
}

// UnimplementedDocumentAnnotatorServer should be embedded to have forward compatible implementations.
type UnimplementedDocumentAnnotatorServer struct {
}

func (UnimplementedDocumentAnnotatorServer) AnnotateDocument(context.Context, *DocumentAnnotatorRequest) (*DocumentAnnotatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnotateDocument not implemented")
}
func (UnimplementedDocumentAnnotatorServer) AnswerDocumentQuestion(context.Context, *DocumentQuestionRequest) (*DocumentQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerDocumentQuestion not implemented")
}
func (UnimplementedDocumentAnnotatorServer) GenerateStructuredAnswer(*GenerateStructuredAnswerRequest, DocumentAnnotator_GenerateStructuredAnswerServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateStructuredAnswer not implemented")
}

// UnsafeDocumentAnnotatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentAnnotatorServer will
// result in compilation errors.
type UnsafeDocumentAnnotatorServer interface {
	mustEmbedUnimplementedDocumentAnnotatorServer()
}

func RegisterDocumentAnnotatorServer(s grpc.ServiceRegistrar, srv DocumentAnnotatorServer) {
	s.RegisterService(&DocumentAnnotator_ServiceDesc, srv)
}

func _DocumentAnnotator_AnnotateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentAnnotatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentAnnotatorServer).AnnotateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentAnnotator_AnnotateDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentAnnotatorServer).AnnotateDocument(ctx, req.(*DocumentAnnotatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentAnnotator_AnswerDocumentQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentAnnotatorServer).AnswerDocumentQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentAnnotator_AnswerDocumentQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentAnnotatorServer).AnswerDocumentQuestion(ctx, req.(*DocumentQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentAnnotator_GenerateStructuredAnswer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenerateStructuredAnswerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DocumentAnnotatorServer).GenerateStructuredAnswer(m, &documentAnnotatorGenerateStructuredAnswerServer{stream})
}

type DocumentAnnotator_GenerateStructuredAnswerServer interface {
	Send(*GenerateStructuredAnswerResponse) error
	grpc.ServerStream
}

type documentAnnotatorGenerateStructuredAnswerServer struct {
	grpc.ServerStream
}

func (x *documentAnnotatorGenerateStructuredAnswerServer) Send(m *GenerateStructuredAnswerResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DocumentAnnotator_ServiceDesc is the grpc.ServiceDesc for DocumentAnnotator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocumentAnnotator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ssn.annotator.v1.DocumentAnnotator",
	HandlerType: (*DocumentAnnotatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnnotateDocument",
			Handler:    _DocumentAnnotator_AnnotateDocument_Handler,
		},
		{
			MethodName: "AnswerDocumentQuestion",
			Handler:    _DocumentAnnotator_AnswerDocumentQuestion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateStructuredAnswer",
			Handler:       _DocumentAnnotator_GenerateStructuredAnswer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ssn/annotator/v1/annotator.proto",
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: ssn/dataservice/v1/dataservice.proto

package dataservice

import (
	_ "github.com/e-conomic/vmlapis/gen/go/gen_bq_schema"
	_type "github.com/e-conomic/vmlapis/gen/go/ssn/type"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	date "google.golang.org/genproto/googleapis/type/date"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ta                    *_type.TextAnnotation  `protobuf:"bytes,1,opt,name=ta,proto3" json:"ta,omitempty"`
	Bytes                 []byte                 `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Id                    string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Consumer              string                 `protobuf:"bytes,4,opt,name=consumer,proto3" json:"consumer,omitempty"`
	Tags                  []string               `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	TrueValues            *TrueValues            `protobuf:"bytes,6,opt,name=true_values,json=trueValues,proto3" json:"true_values,omitempty"`
	PredictionValues      *PredictionValues      `protobuf:"bytes,7,opt,name=prediction_values,json=predictionValues,proto3" json:"prediction_values,omitempty"`
	FeedbackTime          uint64                 `protobuf:"varint,8,opt,name=feedback_time,json=feedbackTime,proto3" json:"feedback_time,omitempty"`
	PredictionConfidences *PredictionConfidences `protobuf:"bytes,9,opt,name=prediction_confidences,json=predictionConfidences,proto3" json:"prediction_confidences,omitempty"`
	PredictionMetadata    *PredictionMetadata    `protobuf:"bytes,10,opt,name=prediction_metadata,json=predictionMetadata,proto3" json:"prediction_metadata,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_ssn_dataservice_v1_dataservice_proto_rawDescGZIP(), []int{0}
}

func (x *Document) GetTa() *_type.TextAnnotation {
	if x != nil {
		return x.Ta
	}
	return nil
}

func (x *Document) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *Document) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Document) GetConsumer() string {
	if x != nil {
		return x.Consumer
	}
	return ""
}

func (x *Document) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Document) GetTrueValues() *TrueValues {
	if x != nil {
		return x.TrueValues
	}
	return nil
}

func (x *Document) GetPredictionValues() *PredictionValues {
	if x != nil {
		return x.PredictionValues
	}
	return nil
}

func (x *Document) GetFeedbackTime() uint64 {
	if x != nil {
		return x.FeedbackTime
	}
	return 0
}

func (x *Document) GetPredictionConfidences() *PredictionConfidences {
	if x != nil {
		return x.PredictionConfidences
	}
	return nil
}

func (x *Document) GetPredictionMetadata() *PredictionMetadata {
	if x != nil {
		return x.PredictionMetadata
	}
	return nil
}

type TrueValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalInclVat                *wrapperspb.DoubleValue           `protobuf:"bytes,1,opt,name=total_incl_vat,json=totalInclVat,proto3" json:"total_incl_vat,omitempty"`
	TotalVat                    *wrapperspb.DoubleValue           `protobuf:"bytes,2,opt,name=total_vat,json=totalVat,proto3" json:"total_vat,omitempty"`
	TotalExclVat                *wrapperspb.DoubleValue           `protobuf:"bytes,3,opt,name=total_excl_vat,json=totalExclVat,proto3" json:"total_excl_vat,omitempty"`
	OrderDate                   *date.Date                        `protobuf:"bytes,4,opt,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`
	PaymentDueDate              *date.Date                        `protobuf:"bytes,5,opt,name=payment_due_date,json=paymentDueDate,proto3" json:"payment_due_date,omitempty"`
	DocumentType                *wrapperspb.StringValue           `protobuf:"bytes,6,opt,name=document_type,json=documentType,proto3" json:"document_type,omitempty"`
	Currency                    *wrapperspb.StringValue           `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	CreditCardLastFour          *wrapperspb.StringValue           `protobuf:"bytes,8,opt,name=credit_card_last_four,json=creditCardLastFour,proto3" json:"credit_card_last_four,omitempty"`
	PaymentMethod               *wrapperspb.StringValue           `protobuf:"bytes,9,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	OcrLineDkType               *wrapperspb.StringValue           `protobuf:"bytes,10,opt,name=ocr_line_dk_type,json=ocrLineDkType,proto3" json:"ocr_line_dk_type,omitempty"`
	OcrLineDkPaymentId          *wrapperspb.StringValue           `protobuf:"bytes,11,opt,name=ocr_line_dk_payment_id,json=ocrLineDkPaymentId,proto3" json:"ocr_line_dk_payment_id,omitempty"`
	OcrLineDkCreditorId         *wrapperspb.StringValue           `protobuf:"bytes,12,opt,name=ocr_line_dk_creditor_id,json=ocrLineDkCreditorId,proto3" json:"ocr_line_dk_creditor_id,omitempty"`
	OcrLineSePaymentId          *wrapperspb.StringValue           `protobuf:"bytes,13,opt,name=ocr_line_se_payment_id,json=ocrLineSePaymentId,proto3" json:"ocr_line_se_payment_id,omitempty"`
	OcrLineSeBankgiroCreditorId *wrapperspb.StringValue           `protobuf:"bytes,14,opt,name=ocr_line_se_bankgiro_creditor_id,json=ocrLineSeBankgiroCreditorId,proto3" json:"ocr_line_se_bankgiro_creditor_id,omitempty"`
	OcrLineSePlusgiroCreditorId *wrapperspb.StringValue           `protobuf:"bytes,15,opt,name=ocr_line_se_plusgiro_creditor_id,json=ocrLineSePlusgiroCreditorId,proto3" json:"ocr_line_se_plusgiro_creditor_id,omitempty"`
	OcrLineNoPaymentId          *wrapperspb.StringValue           `protobuf:"bytes,16,opt,name=ocr_line_no_payment_id,json=ocrLineNoPaymentId,proto3" json:"ocr_line_no_payment_id,omitempty"`
	OcrLineFiPaymentId          *wrapperspb.StringValue           `protobuf:"bytes,17,opt,name=ocr_line_fi_payment_id,json=ocrLineFiPaymentId,proto3" json:"ocr_line_fi_payment_id,omitempty"`
	OcrLineNlPaymentId          *wrapperspb.StringValue           `protobuf:"bytes,18,opt,name=ocr_line_nl_payment_id,json=ocrLineNlPaymentId,proto3" json:"ocr_line_nl_payment_id,omitempty"`
	SupplierCorporateId         *wrapperspb.StringValue           `protobuf:"bytes,19,opt,name=supplier_corporate_id,json=supplierCorporateId,proto3" json:"supplier_corporate_id,omitempty"`
	SupplierCountryCode         *wrapperspb.StringValue           `protobuf:"bytes,20,opt,name=supplier_country_code,json=supplierCountryCode,proto3" json:"supplier_country_code,omitempty"`
	InvoiceNumber               *wrapperspb.StringValue           `protobuf:"bytes,21,opt,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	Iban                        *wrapperspb.StringValue           `protobuf:"bytes,22,opt,name=iban,proto3" json:"iban,omitempty"`
	OrderReference              *wrapperspb.StringValue           `protobuf:"bytes,23,opt,name=order_reference,json=orderReference,proto3" json:"order_reference,omitempty"`
	BankAccountNumber           *wrapperspb.StringValue           `protobuf:"bytes,24,opt,name=bank_account_number,json=bankAccountNumber,proto3" json:"bank_account_number,omitempty"`
	BankRegistrationNumber      *wrapperspb.StringValue           `protobuf:"bytes,25,opt,name=bank_registration_number,json=bankRegistrationNumber,proto3" json:"bank_registration_number,omitempty"`
	SupplierName                *wrapperspb.StringValue           `protobuf:"bytes,26,opt,name=supplier_name,json=supplierName,proto3" json:"supplier_name,omitempty"`
	Bic                         *wrapperspb.StringValue           `protobuf:"bytes,27,opt,name=bic,proto3" json:"bic,omitempty"`
	DocumentNumber              *wrapperspb.StringValue           `protobuf:"bytes,28,opt,name=document_number,json=documentNumber,proto3" json:"document_number,omitempty"`
	DocumentDate                *date.Date                        `protobuf:"bytes,29,opt,name=document_date,json=documentDate,proto3" json:"document_date,omitempty"`
	OrderNumber                 *wrapperspb.StringValue           `protobuf:"bytes,30,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	SupplierVatNumber           *wrapperspb.StringValue           `protobuf:"bytes,31,opt,name=supplier_vat_number,json=supplierVatNumber,proto3" json:"supplier_vat_number,omitempty"`
	SupplierOrganisationNumber  *wrapperspb.StringValue           `protobuf:"bytes,32,opt,name=supplier_organisation_number,json=supplierOrganisationNumber,proto3" json:"supplier_organisation_number,omitempty"`
	SupplierAddress             *wrapperspb.StringValue           `protobuf:"bytes,33,opt,name=supplier_address,json=supplierAddress,proto3" json:"supplier_address,omitempty"`
	CustomerNumber              *wrapperspb.StringValue           `protobuf:"bytes,34,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ReceiverOrderNumber         *wrapperspb.StringValue           `protobuf:"bytes,35,opt,name=receiver_order_number,json=receiverOrderNumber,proto3" json:"receiver_order_number,omitempty"`
	OcrLineBePaymentId          *wrapperspb.StringValue           `protobuf:"bytes,36,opt,name=ocr_line_be_payment_id,json=ocrLineBePaymentId,proto3" json:"ocr_line_be_payment_id,omitempty"`
	ReceiverAddress             *wrapperspb.StringValue           `protobuf:"bytes,37,opt,name=receiver_address,json=receiverAddress,proto3" json:"receiver_address,omitempty"`
	ReceiverCountryCode         *wrapperspb.StringValue           `protobuf:"bytes,38,opt,name=receiver_country_code,json=receiverCountryCode,proto3" json:"receiver_country_code,omitempty"`
	ReceiverName                *wrapperspb.StringValue           `protobuf:"bytes,39,opt,name=receiver_name,json=receiverName,proto3" json:"receiver_name,omitempty"`
	ReceiverVatNumber           *wrapperspb.StringValue           `protobuf:"bytes,40,opt,name=receiver_vat_number,json=receiverVatNumber,proto3" json:"receiver_vat_number,omitempty"`
	PurchaseLines               []*_type.PurchaseLineCandidate    `protobuf:"bytes,41,rep,name=purchase_lines,json=purchaseLines,proto3" json:"purchase_lines,omitempty"`
	Answers                     []*_type.AnswerCandidate          `protobuf:"bytes,42,rep,name=answers,proto3" json:"answers,omitempty"`
	VatDistribution             []*_type.VatDistributionCandidate `protobuf:"bytes,43,rep,name=vat_distribution,json=vatDistribution,proto3" json:"vat_distribution,omitempty"`
	CheckInDate                 *date.Date                        `protobuf:"bytes,44,opt,name=check_in_date,json=checkInDate,proto3" json:"check_in_date,omitempty"`
	CheckOutDate                *date.Date                        `protobuf:"bytes,45,opt,name=check_out_date,json=checkOutDate,proto3" json:"check_out_date,omitempty"`
}

func (x *TrueValues) Reset() {
	*x = TrueValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrueValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrueValues) ProtoMessage() {}

func (x *TrueValues) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrueValues.ProtoReflect.Descriptor instead.
func (*TrueValues) Descriptor() ([]byte, []int) {
	return file_ssn_dataservice_v1_dataservice_proto_rawDescGZIP(), []int{1}
}

func (x *TrueValues) GetTotalInclVat() *wrapperspb.DoubleValue {
	if x != nil {
		return x.TotalInclVat
	}
	return nil
}

func (x *TrueValues) GetTotalVat() *wrapperspb.DoubleValue {
	if x != nil {
		return x.TotalVat
	}
	return nil
}

func (x *TrueValues) GetTotalExclVat() *wrapperspb.DoubleValue {
	if x != nil {
		return x.TotalExclVat
	}
	return nil
}

func (x *TrueValues) GetOrderDate() *date.Date {
	if x != nil {
		return x.OrderDate
	}
	return nil
}

func (x *TrueValues) GetPaymentDueDate() *date.Date {
	if x != nil {
		return x.PaymentDueDate
	}
	return nil
}

func (x *TrueValues) GetDocumentType() *wrapperspb.StringValue {
	if x != nil {
		return x.DocumentType
	}
	return nil
}

func (x *TrueValues) GetCurrency() *wrapperspb.StringValue {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *TrueValues) GetCreditCardLastFour() *wrapperspb.StringValue {
	if x != nil {
		return x.CreditCardLastFour
	}
	return nil
}

func (x *TrueValues) GetPaymentMethod() *wrapperspb.StringValue {
	if x != nil {
		return x.PaymentMethod
	}
	return nil
}

func (x *TrueValues) GetOcrLineDkType() *wrapperspb.StringValue {
	if x != nil {
		return x.OcrLineDkType
	}
	return nil
}

func (x *TrueValues) GetOcrLineDkPaymentId() *wrapperspb.StringValue {
	if x != nil {
		return x.OcrLineDkPaymentId
	}
	return nil
}

func (x *TrueValues) GetOcrLineDkCreditorId() *wrapperspb.StringValue {
	if x != nil {
		return x.OcrLineDkCreditorId
	}
	return nil
}

func (x *TrueValues) GetOcrLineSePaymentId() *wrapperspb.StringValue {
	if x != nil {
		return x.OcrLineSePaymentId
	}
	return nil
}

func (x *TrueValues) GetOcrLineSeBankgiroCreditorId() *wrapperspb.StringValue {
	if x != nil {
		return x.OcrLineSeBankgiroCreditorId
	}
	return nil
}

func (x *TrueValues) GetOcrLineSePlusgiroCreditorId() *wrapperspb.StringValue {
	if x != nil {
		return x.OcrLineSePlusgiroCreditorId
	}
	return nil
}

func (x *TrueValues) GetOcrLineNoPaymentId() *wrapperspb.StringValue {
	if x != nil {
		return x.OcrLineNoPaymentId
	}
	return nil
}

func (x *TrueValues) GetOcrLineFiPaymentId() *wrapperspb.StringValue {
	if x != nil {
		return x.OcrLineFiPaymentId
	}
	return nil
}

func (x *TrueValues) GetOcrLineNlPaymentId() *wrapperspb.StringValue {
	if x != nil {
		return x.OcrLineNlPaymentId
	}
	return nil
}

func (x *TrueValues) GetSupplierCorporateId() *wrapperspb.StringValue {
	if x != nil {
		return x.SupplierCorporateId
	}
	return nil
}

func (x *TrueValues) GetSupplierCountryCode() *wrapperspb.StringValue {
	if x != nil {
		return x.SupplierCountryCode
	}
	return nil
}

func (x *TrueValues) GetInvoiceNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.InvoiceNumber
	}
	return nil
}

func (x *TrueValues) GetIban() *wrapperspb.StringValue {
	if x != nil {
		return x.Iban
	}
	return nil
}

func (x *TrueValues) GetOrderReference() *wrapperspb.StringValue {
	if x != nil {
		return x.OrderReference
	}
	return nil
}

func (x *TrueValues) GetBankAccountNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.BankAccountNumber
	}
	return nil
}

func (x *TrueValues) GetBankRegistrationNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.BankRegistrationNumber
	}
	return nil
}

func (x *TrueValues) GetSupplierName() *wrapperspb.StringValue {
	if x != nil {
		return x.SupplierName
	}
	return nil
}

func (x *TrueValues) GetBic() *wrapperspb.StringValue {
	if x != nil {
		return x.Bic
	}
	return nil
}

func (x *TrueValues) GetDocumentNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.DocumentNumber
	}
	return nil
}

func (x *TrueValues) GetDocumentDate() *date.Date {
	if x != nil {
		return x.DocumentDate
	}
	return nil
}

func (x *TrueValues) GetOrderNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.OrderNumber
	}
	return nil
}

func (x *TrueValues) GetSupplierVatNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.SupplierVatNumber
	}
	return nil
}

func (x *TrueValues) GetSupplierOrganisationNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.SupplierOrganisationNumber
	}
	return nil
}

func (x *TrueValues) GetSupplierAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.SupplierAddress
	}
	return nil
}

func (x *TrueValues) GetCustomerNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *TrueValues) GetReceiverOrderNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.ReceiverOrderNumber
	}
	return nil
}

func (x *TrueValues) GetOcrLineBePaymentId() *wrapperspb.StringValue {
	if x != nil {
		return x.OcrLineBePaymentId
	}
	return nil
}

func (x *TrueValues) GetReceiverAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.ReceiverAddress
	}
	return nil
}

func (x *TrueValues) GetReceiverCountryCode() *wrapperspb.StringValue {
	if x != nil {
		return x.ReceiverCountryCode
	}
	return nil
}

func (x *TrueValues) GetReceiverName() *wrapperspb.StringValue {
	if x != nil {
		return x.ReceiverName
	}
	return nil
}

func (x *TrueValues) GetReceiverVatNumber() *wrapperspb.StringValue {
	if x != nil {
		return x.ReceiverVatNumber
	}
	return nil
}

func (x *TrueValues) GetPurchaseLines() []*_type.PurchaseLineCandidate {
	if x != nil {
		return x.PurchaseLines
	}
	return nil
}

func (x *TrueValues) GetAnswers() []*_type.AnswerCandidate {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *TrueValues) GetVatDistribution() []*_type.VatDistributionCandidate {
	if x != nil {
		return x.VatDistribution
	}
	return nil
}

func (x *TrueValues) GetCheckInDate() *date.Date {
	if x != nil {
		return x.CheckInDate
	}
	return nil
}

func (x *TrueValues) GetCheckOutDate() *date.Date {
	if x != nil {
		return x.CheckOutDate
	}
	return nil
}

type PredictionValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalInclVat                []*wrapperspb.DoubleValue         `protobuf:"bytes,1,rep,name=total_incl_vat,json=totalInclVat,proto3" json:"total_incl_vat,omitempty"`
	TotalVat                    []*wrapperspb.DoubleValue         `protobuf:"bytes,2,rep,name=total_vat,json=totalVat,proto3" json:"total_vat,omitempty"`
	TotalExclVat                []*wrapperspb.DoubleValue         `protobuf:"bytes,3,rep,name=total_excl_vat,json=totalExclVat,proto3" json:"total_excl_vat,omitempty"`
	OrderDate                   []*date.Date                      `protobuf:"bytes,4,rep,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`
	PaymentDueDate              []*date.Date                      `protobuf:"bytes,5,rep,name=payment_due_date,json=paymentDueDate,proto3" json:"payment_due_date,omitempty"`
	DocumentType                []*wrapperspb.StringValue         `protobuf:"bytes,6,rep,name=document_type,json=documentType,proto3" json:"document_type,omitempty"`
	Currency                    []*wrapperspb.StringValue         `protobuf:"bytes,7,rep,name=currency,proto3" json:"currency,omitempty"`
	CreditCardLastFour          []*wrapperspb.StringValue         `protobuf:"bytes,8,rep,name=credit_card_last_four,json=creditCardLastFour,proto3" json:"credit_card_last_four,omitempty"`
	PaymentMethod               []*wrapperspb.StringValue         `protobuf:"bytes,9,rep,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	OcrLineDkType               []*wrapperspb.StringValue         `protobuf:"bytes,10,rep,name=ocr_line_dk_type,json=ocrLineDkType,proto3" json:"ocr_line_dk_type,omitempty"`
	OcrLineDkPaymentId          []*wrapperspb.StringValue         `protobuf:"bytes,11,rep,name=ocr_line_dk_payment_id,json=ocrLineDkPaymentId,proto3" json:"ocr_line_dk_payment_id,omitempty"`
	OcrLineDkCreditorId         []*wrapperspb.StringValue         `protobuf:"bytes,12,rep,name=ocr_line_dk_creditor_id,json=ocrLineDkCreditorId,proto3" json:"ocr_line_dk_creditor_id,omitempty"`
	OcrLineSePaymentId          []*wrapperspb.StringValue         `protobuf:"bytes,13,rep,name=ocr_line_se_payment_id,json=ocrLineSePaymentId,proto3" json:"ocr_line_se_payment_id,omitempty"`
	OcrLineSeBankgiroCreditorId []*wrapperspb.StringValue         `protobuf:"bytes,14,rep,name=ocr_line_se_bankgiro_creditor_id,json=ocrLineSeBankgiroCreditorId,proto3" json:"ocr_line_se_bankgiro_creditor_id,omitempty"`
	OcrLineSePlusgiroCreditorId []*wrapperspb.StringValue         `protobuf:"bytes,15,rep,name=ocr_line_se_plusgiro_creditor_id,json=ocrLineSePlusgiroCreditorId,proto3" json:"ocr_line_se_plusgiro_creditor_id,omitempty"`
	OcrLineNoPaymentId          []*wrapperspb.StringValue         `protobuf:"bytes,16,rep,name=ocr_line_no_payment_id,json=ocrLineNoPaymentId,proto3" json:"ocr_line_no_payment_id,omitempty"`
	OcrLineFiPaymentId          []*wrapperspb.StringValue         `protobuf:"bytes,17,rep,name=ocr_line_fi_payment_id,json=ocrLineFiPaymentId,proto3" json:"ocr_line_fi_payment_id,omitempty"`
	OcrLineNlPaymentId          []*wrapperspb.StringValue         `protobuf:"bytes,18,rep,name=ocr_line_nl_payment_id,json=ocrLineNlPaymentId,proto3" json:"ocr_line_nl_payment_id,omitempty"`
	SupplierCorporateId         []*wrapperspb.StringValue         `protobuf:"bytes,19,rep,name=supplier_corporate_id,json=supplierCorporateId,proto3" json:"supplier_corporate_id,omitempty"`
	SupplierCountryCode         []*wrapperspb.StringValue         `protobuf:"bytes,20,rep,name=supplier_country_code,json=supplierCountryCode,proto3" json:"supplier_country_code,omitempty"`
	InvoiceNumber               []*wrapperspb.StringValue         `protobuf:"bytes,21,rep,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	Iban                        []*wrapperspb.StringValue         `protobuf:"bytes,22,rep,name=iban,proto3" json:"iban,omitempty"`
	OrderReference              []*wrapperspb.StringValue         `protobuf:"bytes,23,rep,name=order_reference,json=orderReference,proto3" json:"order_reference,omitempty"`
	BankAccountNumber           []*wrapperspb.StringValue         `protobuf:"bytes,24,rep,name=bank_account_number,json=bankAccountNumber,proto3" json:"bank_account_number,omitempty"`
	BankRegistrationNumber      []*wrapperspb.StringValue         `protobuf:"bytes,25,rep,name=bank_registration_number,json=bankRegistrationNumber,proto3" json:"bank_registration_number,omitempty"`
	SupplierName                []*wrapperspb.StringValue         `protobuf:"bytes,26,rep,name=supplier_name,json=supplierName,proto3" json:"supplier_name,omitempty"`
	Bic                         []*wrapperspb.StringValue         `protobuf:"bytes,27,rep,name=bic,proto3" json:"bic,omitempty"`
	DocumentNumber              []*wrapperspb.StringValue         `protobuf:"bytes,28,rep,name=document_number,json=documentNumber,proto3" json:"document_number,omitempty"`
	DocumentDate                []*date.Date                      `protobuf:"bytes,29,rep,name=document_date,json=documentDate,proto3" json:"document_date,omitempty"`
	OrderNumber                 []*wrapperspb.StringValue         `protobuf:"bytes,30,rep,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	SupplierVatNumber           []*wrapperspb.StringValue         `protobuf:"bytes,31,rep,name=supplier_vat_number,json=supplierVatNumber,proto3" json:"supplier_vat_number,omitempty"`
	SupplierOrganisationNumber  []*wrapperspb.StringValue         `protobuf:"bytes,32,rep,name=supplier_organisation_number,json=supplierOrganisationNumber,proto3" json:"supplier_organisation_number,omitempty"`
	SupplierAddress             []*wrapperspb.StringValue         `protobuf:"bytes,33,rep,name=supplier_address,json=supplierAddress,proto3" json:"supplier_address,omitempty"`
	CustomerNumber              []*wrapperspb.StringValue         `protobuf:"bytes,34,rep,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ReceiverOrderNumber         []*wrapperspb.StringValue         `protobuf:"bytes,35,rep,name=receiver_order_number,json=receiverOrderNumber,proto3" json:"receiver_order_number,omitempty"`
	OcrLineBePaymentId          []*wrapperspb.StringValue         `protobuf:"bytes,36,rep,name=ocr_line_be_payment_id,json=ocrLineBePaymentId,proto3" json:"ocr_line_be_payment_id,omitempty"`
	ReceiverAddress             []*wrapperspb.StringValue         `protobuf:"bytes,37,rep,name=receiver_address,json=receiverAddress,proto3" json:"receiver_address,omitempty"`
	ReceiverCountryCode         []*wrapperspb.StringValue         `protobuf:"bytes,38,rep,name=receiver_country_code,json=receiverCountryCode,proto3" json:"receiver_country_code,omitempty"`
	ReceiverName                []*wrapperspb.StringValue         `protobuf:"bytes,39,rep,name=receiver_name,json=receiverName,proto3" json:"receiver_name,omitempty"`
	ReceiverVatNumber           []*wrapperspb.StringValue         `protobuf:"bytes,40,rep,name=receiver_vat_number,json=receiverVatNumber,proto3" json:"receiver_vat_number,omitempty"`
	PurchaseLines               []*_type.PurchaseLineCandidate    `protobuf:"bytes,41,rep,name=purchase_lines,json=purchaseLines,proto3" json:"purchase_lines,omitempty"`
	Answers                     []*_type.AnswerCandidate          `protobuf:"bytes,42,rep,name=answers,proto3" json:"answers,omitempty"`
	VatDistribution             []*_type.VatDistributionCandidate `protobuf:"bytes,43,rep,name=vat_distribution,json=vatDistribution,proto3" json:"vat_distribution,omitempty"`
	CheckInDate                 []*date.Date                      `protobuf:"bytes,44,rep,name=check_in_date,json=checkInDate,proto3" json:"check_in_date,omitempty"`
	CheckOutDate                []*date.Date                      `protobuf:"bytes,45,rep,name=check_out_date,json=checkOutDate,proto3" json:"check_out_date,omitempty"`
}

func (x *PredictionValues) Reset() {
	*x = PredictionValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictionValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictionValues) ProtoMessage() {}

func (x *PredictionValues) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictionValues.ProtoReflect.Descriptor instead.
func (*PredictionValues) Descriptor() ([]byte, []int) {
	return file_ssn_dataservice_v1_dataservice_proto_rawDescGZIP(), []int{2}
}

func (x *PredictionValues) GetTotalInclVat() []*wrapperspb.DoubleValue {
	if x != nil {
		return x.TotalInclVat
	}
	return nil
}

func (x *PredictionValues) GetTotalVat() []*wrapperspb.DoubleValue {
	if x != nil {
		return x.TotalVat
	}
	return nil
}

func (x *PredictionValues) GetTotalExclVat() []*wrapperspb.DoubleValue {
	if x != nil {
		return x.TotalExclVat
	}
	return nil
}

func (x *PredictionValues) GetOrderDate() []*date.Date {
	if x != nil {
		return x.OrderDate
	}
	return nil
}

func (x *PredictionValues) GetPaymentDueDate() []*date.Date {
	if x != nil {
		return x.PaymentDueDate
	}
	return nil
}

func (x *PredictionValues) GetDocumentType() []*wrapperspb.StringValue {
	if x != nil {
		return x.DocumentType
	}
	return nil
}

func (x *PredictionValues) GetCurrency() []*wrapperspb.StringValue {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *PredictionValues) GetCreditCardLastFour() []*wrapperspb.StringValue {
	if x != nil {
		return x.CreditCardLastFour
	}
	return nil
}

func (x *PredictionValues) GetPaymentMethod() []*wrapperspb.StringValue {
	if x != nil {
		return x.PaymentMethod
	}
	return nil
}

func (x *PredictionValues) GetOcrLineDkType() []*wrapperspb.StringValue {
	if x != nil {
		return x.OcrLineDkType
	}
	return nil
}

func (x *PredictionValues) GetOcrLineDkPaymentId() []*wrapperspb.StringValue {
	if x != nil {
		return x.OcrLineDkPaymentId
	}
	return nil
}

func (x *PredictionValues) GetOcrLineDkCreditorId() []*wrapperspb.StringValue {
	if x != nil {
		return x.OcrLineDkCreditorId
	}
	return nil
}

func (x *PredictionValues) GetOcrLineSePaymentId() []*wrapperspb.StringValue {
	if x != nil {
		return x.OcrLineSePaymentId
	}
	return nil
}

func (x *PredictionValues) GetOcrLineSeBankgiroCreditorId() []*wrapperspb.StringValue {
	if x != nil {
		return x.OcrLineSeBankgiroCreditorId
	}
	return nil
}

func (x *PredictionValues) GetOcrLineSePlusgiroCreditorId() []*wrapperspb.StringValue {
	if x != nil {
		return x.OcrLineSePlusgiroCreditorId
	}
	return nil
}

func (x *PredictionValues) GetOcrLineNoPaymentId() []*wrapperspb.StringValue {
	if x != nil {
		return x.OcrLineNoPaymentId
	}
	return nil
}

func (x *PredictionValues) GetOcrLineFiPaymentId() []*wrapperspb.StringValue {
	if x != nil {
		return x.OcrLineFiPaymentId
	}
	return nil
}

func (x *PredictionValues) GetOcrLineNlPaymentId() []*wrapperspb.StringValue {
	if x != nil {
		return x.OcrLineNlPaymentId
	}
	return nil
}

func (x *PredictionValues) GetSupplierCorporateId() []*wrapperspb.StringValue {
	if x != nil {
		return x.SupplierCorporateId
	}
	return nil
}

func (x *PredictionValues) GetSupplierCountryCode() []*wrapperspb.StringValue {
	if x != nil {
		return x.SupplierCountryCode
	}
	return nil
}

func (x *PredictionValues) GetInvoiceNumber() []*wrapperspb.StringValue {
	if x != nil {
		return x.InvoiceNumber
	}
	return nil
}

func (x *PredictionValues) GetIban() []*wrapperspb.StringValue {
	if x != nil {
		return x.Iban
	}
	return nil
}

func (x *PredictionValues) GetOrderReference() []*wrapperspb.StringValue {
	if x != nil {
		return x.OrderReference
	}
	return nil
}

func (x *PredictionValues) GetBankAccountNumber() []*wrapperspb.StringValue {
	if x != nil {
		return x.BankAccountNumber
	}
	return nil
}

func (x *PredictionValues) GetBankRegistrationNumber() []*wrapperspb.StringValue {
	if x != nil {
		return x.BankRegistrationNumber
	}
	return nil
}

func (x *PredictionValues) GetSupplierName() []*wrapperspb.StringValue {
	if x != nil {
		return x.SupplierName
	}
	return nil
}

func (x *PredictionValues) GetBic() []*wrapperspb.StringValue {
	if x != nil {
		return x.Bic
	}
	return nil
}

func (x *PredictionValues) GetDocumentNumber() []*wrapperspb.StringValue {
	if x != nil {
		return x.DocumentNumber
	}
	return nil
}

func (x *PredictionValues) GetDocumentDate() []*date.Date {
	if x != nil {
		return x.DocumentDate
	}
	return nil
}

func (x *PredictionValues) GetOrderNumber() []*wrapperspb.StringValue {
	if x != nil {
		return x.OrderNumber
	}
	return nil
}

func (x *PredictionValues) GetSupplierVatNumber() []*wrapperspb.StringValue {
	if x != nil {
		return x.SupplierVatNumber
	}
	return nil
}

func (x *PredictionValues) GetSupplierOrganisationNumber() []*wrapperspb.StringValue {
	if x != nil {
		return x.SupplierOrganisationNumber
	}
	return nil
}

func (x *PredictionValues) GetSupplierAddress() []*wrapperspb.StringValue {
	if x != nil {
		return x.SupplierAddress
	}
	return nil
}

func (x *PredictionValues) GetCustomerNumber() []*wrapperspb.StringValue {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *PredictionValues) GetReceiverOrderNumber() []*wrapperspb.StringValue {
	if x != nil {
		return x.ReceiverOrderNumber
	}
	return nil
}

func (x *PredictionValues) GetOcrLineBePaymentId() []*wrapperspb.StringValue {
	if x != nil {
		return x.OcrLineBePaymentId
	}
	return nil
}

func (x *PredictionValues) GetReceiverAddress() []*wrapperspb.StringValue {
	if x != nil {
		return x.ReceiverAddress
	}
	return nil
}

func (x *PredictionValues) GetReceiverCountryCode() []*wrapperspb.StringValue {
	if x != nil {
		return x.ReceiverCountryCode
	}
	return nil
}

func (x *PredictionValues) GetReceiverName() []*wrapperspb.StringValue {
	if x != nil {
		return x.ReceiverName
	}
	return nil
}

func (x *PredictionValues) GetReceiverVatNumber() []*wrapperspb.StringValue {
	if x != nil {
		return x.ReceiverVatNumber
	}
	return nil
}

func (x *PredictionValues) GetPurchaseLines() []*_type.PurchaseLineCandidate {
	if x != nil {
		return x.PurchaseLines
	}
	return nil
}

func (x *PredictionValues) GetAnswers() []*_type.AnswerCandidate {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *PredictionValues) GetVatDistribution() []*_type.VatDistributionCandidate {
	if x != nil {
		return x.VatDistribution
	}
	return nil
}

func (x *PredictionValues) GetCheckInDate() []*date.Date {
	if x != nil {
		return x.CheckInDate
	}
	return nil
}

func (x *PredictionValues) GetCheckOutDate() []*date.Date {
	if x != nil {
		return x.CheckOutDate
	}
	return nil
}

type PredictionConfidences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalInclVat                []*wrapperspb.FloatValue `protobuf:"bytes,1,rep,name=total_incl_vat,json=totalInclVat,proto3" json:"total_incl_vat,omitempty"`
	TotalVat                    []*wrapperspb.FloatValue `protobuf:"bytes,2,rep,name=total_vat,json=totalVat,proto3" json:"total_vat,omitempty"`
	TotalExclVat                []*wrapperspb.FloatValue `protobuf:"bytes,3,rep,name=total_excl_vat,json=totalExclVat,proto3" json:"total_excl_vat,omitempty"`
	OrderDate                   []*wrapperspb.FloatValue `protobuf:"bytes,4,rep,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`
	PaymentDueDate              []*wrapperspb.FloatValue `protobuf:"bytes,5,rep,name=payment_due_date,json=paymentDueDate,proto3" json:"payment_due_date,omitempty"`
	DocumentType                []*wrapperspb.FloatValue `protobuf:"bytes,6,rep,name=document_type,json=documentType,proto3" json:"document_type,omitempty"`
	Currency                    []*wrapperspb.FloatValue `protobuf:"bytes,7,rep,name=currency,proto3" json:"currency,omitempty"`
	CreditCardLastFour          []*wrapperspb.FloatValue `protobuf:"bytes,8,rep,name=credit_card_last_four,json=creditCardLastFour,proto3" json:"credit_card_last_four,omitempty"`
	PaymentMethod               []*wrapperspb.FloatValue `protobuf:"bytes,9,rep,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	OcrLineDkType               []*wrapperspb.FloatValue `protobuf:"bytes,10,rep,name=ocr_line_dk_type,json=ocrLineDkType,proto3" json:"ocr_line_dk_type,omitempty"`
	OcrLineDkPaymentId          []*wrapperspb.FloatValue `protobuf:"bytes,11,rep,name=ocr_line_dk_payment_id,json=ocrLineDkPaymentId,proto3" json:"ocr_line_dk_payment_id,omitempty"`
	OcrLineDkCreditorId         []*wrapperspb.FloatValue `protobuf:"bytes,12,rep,name=ocr_line_dk_creditor_id,json=ocrLineDkCreditorId,proto3" json:"ocr_line_dk_creditor_id,omitempty"`
	OcrLineSePaymentId          []*wrapperspb.FloatValue `protobuf:"bytes,13,rep,name=ocr_line_se_payment_id,json=ocrLineSePaymentId,proto3" json:"ocr_line_se_payment_id,omitempty"`
	OcrLineSeBankgiroCreditorId []*wrapperspb.FloatValue `protobuf:"bytes,14,rep,name=ocr_line_se_bankgiro_creditor_id,json=ocrLineSeBankgiroCreditorId,proto3" json:"ocr_line_se_bankgiro_creditor_id,omitempty"`
	OcrLineSePlusgiroCreditorId []*wrapperspb.FloatValue `protobuf:"bytes,15,rep,name=ocr_line_se_plusgiro_creditor_id,json=ocrLineSePlusgiroCreditorId,proto3" json:"ocr_line_se_plusgiro_creditor_id,omitempty"`
	OcrLineNoPaymentId          []*wrapperspb.FloatValue `protobuf:"bytes,16,rep,name=ocr_line_no_payment_id,json=ocrLineNoPaymentId,proto3" json:"ocr_line_no_payment_id,omitempty"`
	OcrLineFiPaymentId          []*wrapperspb.FloatValue `protobuf:"bytes,17,rep,name=ocr_line_fi_payment_id,json=ocrLineFiPaymentId,proto3" json:"ocr_line_fi_payment_id,omitempty"`
	OcrLineNlPaymentId          []*wrapperspb.FloatValue `protobuf:"bytes,18,rep,name=ocr_line_nl_payment_id,json=ocrLineNlPaymentId,proto3" json:"ocr_line_nl_payment_id,omitempty"`
	SupplierCorporateId         []*wrapperspb.FloatValue `protobuf:"bytes,19,rep,name=supplier_corporate_id,json=supplierCorporateId,proto3" json:"supplier_corporate_id,omitempty"`
	SupplierCountryCode         []*wrapperspb.FloatValue `protobuf:"bytes,20,rep,name=supplier_country_code,json=supplierCountryCode,proto3" json:"supplier_country_code,omitempty"`
	InvoiceNumber               []*wrapperspb.FloatValue `protobuf:"bytes,21,rep,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	Iban                        []*wrapperspb.FloatValue `protobuf:"bytes,22,rep,name=iban,proto3" json:"iban,omitempty"`
	OrderReference              []*wrapperspb.FloatValue `protobuf:"bytes,23,rep,name=order_reference,json=orderReference,proto3" json:"order_reference,omitempty"`
	BankAccountNumber           []*wrapperspb.FloatValue `protobuf:"bytes,24,rep,name=bank_account_number,json=bankAccountNumber,proto3" json:"bank_account_number,omitempty"`
	BankRegistrationNumber      []*wrapperspb.FloatValue `protobuf:"bytes,25,rep,name=bank_registration_number,json=bankRegistrationNumber,proto3" json:"bank_registration_number,omitempty"`
	SupplierName                []*wrapperspb.FloatValue `protobuf:"bytes,26,rep,name=supplier_name,json=supplierName,proto3" json:"supplier_name,omitempty"`
	Bic                         []*wrapperspb.FloatValue `protobuf:"bytes,27,rep,name=bic,proto3" json:"bic,omitempty"`
	DocumentNumber              []*wrapperspb.FloatValue `protobuf:"bytes,28,rep,name=document_number,json=documentNumber,proto3" json:"document_number,omitempty"`
	DocumentDate                []*wrapperspb.FloatValue `protobuf:"bytes,29,rep,name=document_date,json=documentDate,proto3" json:"document_date,omitempty"`
	OrderNumber                 []*wrapperspb.FloatValue `protobuf:"bytes,30,rep,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	SupplierVatNumber           []*wrapperspb.FloatValue `protobuf:"bytes,31,rep,name=supplier_vat_number,json=supplierVatNumber,proto3" json:"supplier_vat_number,omitempty"`
	SupplierOrganisationNumber  []*wrapperspb.FloatValue `protobuf:"bytes,32,rep,name=supplier_organisation_number,json=supplierOrganisationNumber,proto3" json:"supplier_organisation_number,omitempty"`
	SupplierAddress             []*wrapperspb.FloatValue `protobuf:"bytes,33,rep,name=supplier_address,json=supplierAddress,proto3" json:"supplier_address,omitempty"`
	CustomerNumber              []*wrapperspb.FloatValue `protobuf:"bytes,34,rep,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ReceiverOrderNumber         []*wrapperspb.FloatValue `protobuf:"bytes,35,rep,name=receiver_order_number,json=receiverOrderNumber,proto3" json:"receiver_order_number,omitempty"`
	OcrLineBePaymentId          []*wrapperspb.FloatValue `protobuf:"bytes,36,rep,name=ocr_line_be_payment_id,json=ocrLineBePaymentId,proto3" json:"ocr_line_be_payment_id,omitempty"`
	ReceiverAddress             []*wrapperspb.FloatValue `protobuf:"bytes,37,rep,name=receiver_address,json=receiverAddress,proto3" json:"receiver_address,omitempty"`
	ReceiverCountryCode         []*wrapperspb.FloatValue `protobuf:"bytes,38,rep,name=receiver_country_code,json=receiverCountryCode,proto3" json:"receiver_country_code,omitempty"`
	ReceiverName                []*wrapperspb.FloatValue `protobuf:"bytes,39,rep,name=receiver_name,json=receiverName,proto3" json:"receiver_name,omitempty"`
	ReceiverVatNumber           []*wrapperspb.FloatValue `protobuf:"bytes,40,rep,name=receiver_vat_number,json=receiverVatNumber,proto3" json:"receiver_vat_number,omitempty"`
	CheckInDate                 []*wrapperspb.FloatValue `protobuf:"bytes,41,rep,name=check_in_date,json=checkInDate,proto3" json:"check_in_date,omitempty"`
	CheckOutDate                []*wrapperspb.FloatValue `protobuf:"bytes,42,rep,name=check_out_date,json=checkOutDate,proto3" json:"check_out_date,omitempty"`
}

func (x *PredictionConfidences) Reset() {
	*x = PredictionConfidences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictionConfidences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictionConfidences) ProtoMessage() {}

func (x *PredictionConfidences) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictionConfidences.ProtoReflect.Descriptor instead.
func (*PredictionConfidences) Descriptor() ([]byte, []int) {
	return file_ssn_dataservice_v1_dataservice_proto_rawDescGZIP(), []int{3}
}

func (x *PredictionConfidences) GetTotalInclVat() []*wrapperspb.FloatValue {
	if x != nil {
		return x.TotalInclVat
	}
	return nil
}

func (x *PredictionConfidences) GetTotalVat() []*wrapperspb.FloatValue {
	if x != nil {
		return x.TotalVat
	}
	return nil
}

func (x *PredictionConfidences) GetTotalExclVat() []*wrapperspb.FloatValue {
	if x != nil {
		return x.TotalExclVat
	}
	return nil
}

func (x *PredictionConfidences) GetOrderDate() []*wrapperspb.FloatValue {
	if x != nil {
		return x.OrderDate
	}
	return nil
}

func (x *PredictionConfidences) GetPaymentDueDate() []*wrapperspb.FloatValue {
	if x != nil {
		return x.PaymentDueDate
	}
	return nil
}

func (x *PredictionConfidences) GetDocumentType() []*wrapperspb.FloatValue {
	if x != nil {
		return x.DocumentType
	}
	return nil
}

func (x *PredictionConfidences) GetCurrency() []*wrapperspb.FloatValue {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *PredictionConfidences) GetCreditCardLastFour() []*wrapperspb.FloatValue {
	if x != nil {
		return x.CreditCardLastFour
	}
	return nil
}

func (x *PredictionConfidences) GetPaymentMethod() []*wrapperspb.FloatValue {
	if x != nil {
		return x.PaymentMethod
	}
	return nil
}

func (x *PredictionConfidences) GetOcrLineDkType() []*wrapperspb.FloatValue {
	if x != nil {
		return x.OcrLineDkType
	}
	return nil
}

func (x *PredictionConfidences) GetOcrLineDkPaymentId() []*wrapperspb.FloatValue {
	if x != nil {
		return x.OcrLineDkPaymentId
	}
	return nil
}

func (x *PredictionConfidences) GetOcrLineDkCreditorId() []*wrapperspb.FloatValue {
	if x != nil {
		return x.OcrLineDkCreditorId
	}
	return nil
}

func (x *PredictionConfidences) GetOcrLineSePaymentId() []*wrapperspb.FloatValue {
	if x != nil {
		return x.OcrLineSePaymentId
	}
	return nil
}

func (x *PredictionConfidences) GetOcrLineSeBankgiroCreditorId() []*wrapperspb.FloatValue {
	if x != nil {
		return x.OcrLineSeBankgiroCreditorId
	}
	return nil
}

func (x *PredictionConfidences) GetOcrLineSePlusgiroCreditorId() []*wrapperspb.FloatValue {
	if x != nil {
		return x.OcrLineSePlusgiroCreditorId
	}
	return nil
}

func (x *PredictionConfidences) GetOcrLineNoPaymentId() []*wrapperspb.FloatValue {
	if x != nil {
		return x.OcrLineNoPaymentId
	}
	return nil
}

func (x *PredictionConfidences) GetOcrLineFiPaymentId() []*wrapperspb.FloatValue {
	if x != nil {
		return x.OcrLineFiPaymentId
	}
	return nil
}

func (x *PredictionConfidences) GetOcrLineNlPaymentId() []*wrapperspb.FloatValue {
	if x != nil {
		return x.OcrLineNlPaymentId
	}
	return nil
}

func (x *PredictionConfidences) GetSupplierCorporateId() []*wrapperspb.FloatValue {
	if x != nil {
		return x.SupplierCorporateId
	}
	return nil
}

func (x *PredictionConfidences) GetSupplierCountryCode() []*wrapperspb.FloatValue {
	if x != nil {
		return x.SupplierCountryCode
	}
	return nil
}

func (x *PredictionConfidences) GetInvoiceNumber() []*wrapperspb.FloatValue {
	if x != nil {
		return x.InvoiceNumber
	}
	return nil
}

func (x *PredictionConfidences) GetIban() []*wrapperspb.FloatValue {
	if x != nil {
		return x.Iban
	}
	return nil
}

func (x *PredictionConfidences) GetOrderReference() []*wrapperspb.FloatValue {
	if x != nil {
		return x.OrderReference
	}
	return nil
}

func (x *PredictionConfidences) GetBankAccountNumber() []*wrapperspb.FloatValue {
	if x != nil {
		return x.BankAccountNumber
	}
	return nil
}

func (x *PredictionConfidences) GetBankRegistrationNumber() []*wrapperspb.FloatValue {
	if x != nil {
		return x.BankRegistrationNumber
	}
	return nil
}

func (x *PredictionConfidences) GetSupplierName() []*wrapperspb.FloatValue {
	if x != nil {
		return x.SupplierName
	}
	return nil
}

func (x *PredictionConfidences) GetBic() []*wrapperspb.FloatValue {
	if x != nil {
		return x.Bic
	}
	return nil
}

func (x *PredictionConfidences) GetDocumentNumber() []*wrapperspb.FloatValue {
	if x != nil {
		return x.DocumentNumber
	}
	return nil
}

func (x *PredictionConfidences) GetDocumentDate() []*wrapperspb.FloatValue {
	if x != nil {
		return x.DocumentDate
	}
	return nil
}

func (x *PredictionConfidences) GetOrderNumber() []*wrapperspb.FloatValue {
	if x != nil {
		return x.OrderNumber
	}
	return nil
}

func (x *PredictionConfidences) GetSupplierVatNumber() []*wrapperspb.FloatValue {
	if x != nil {
		return x.SupplierVatNumber
	}
	return nil
}

func (x *PredictionConfidences) GetSupplierOrganisationNumber() []*wrapperspb.FloatValue {
	if x != nil {
		return x.SupplierOrganisationNumber
	}
	return nil
}

func (x *PredictionConfidences) GetSupplierAddress() []*wrapperspb.FloatValue {
	if x != nil {
		return x.SupplierAddress
	}
	return nil
}

func (x *PredictionConfidences) GetCustomerNumber() []*wrapperspb.FloatValue {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *PredictionConfidences) GetReceiverOrderNumber() []*wrapperspb.FloatValue {
	if x != nil {
		return x.ReceiverOrderNumber
	}
	return nil
}

func (x *PredictionConfidences) GetOcrLineBePaymentId() []*wrapperspb.FloatValue {
	if x != nil {
		return x.OcrLineBePaymentId
	}
	return nil
}

func (x *PredictionConfidences) GetReceiverAddress() []*wrapperspb.FloatValue {
	if x != nil {
		return x.ReceiverAddress
	}
	return nil
}

func (x *PredictionConfidences) GetReceiverCountryCode() []*wrapperspb.FloatValue {
	if x != nil {
		return x.ReceiverCountryCode
	}
	return nil
}

func (x *PredictionConfidences) GetReceiverName() []*wrapperspb.FloatValue {
	if x != nil {
		return x.ReceiverName
	}
	return nil
}

func (x *PredictionConfidences) GetReceiverVatNumber() []*wrapperspb.FloatValue {
	if x != nil {
		return x.ReceiverVatNumber
	}
	return nil
}

func (x *PredictionConfidences) GetCheckInDate() []*wrapperspb.FloatValue {
	if x != nil {
		return x.CheckInDate
	}
	return nil
}

func (x *PredictionConfidences) GetCheckOutDate() []*wrapperspb.FloatValue {
	if x != nil {
		return x.CheckOutDate
	}
	return nil
}

type PredictionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalInclVat                []*_type.ModelSpec `protobuf:"bytes,1,rep,name=total_incl_vat,json=totalInclVat,proto3" json:"total_incl_vat,omitempty"`
	TotalVat                    []*_type.ModelSpec `protobuf:"bytes,2,rep,name=total_vat,json=totalVat,proto3" json:"total_vat,omitempty"`
	TotalExclVat                []*_type.ModelSpec `protobuf:"bytes,3,rep,name=total_excl_vat,json=totalExclVat,proto3" json:"total_excl_vat,omitempty"`
	OrderDate                   []*_type.ModelSpec `protobuf:"bytes,4,rep,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`
	PaymentDueDate              []*_type.ModelSpec `protobuf:"bytes,5,rep,name=payment_due_date,json=paymentDueDate,proto3" json:"payment_due_date,omitempty"`
	DocumentType                []*_type.ModelSpec `protobuf:"bytes,6,rep,name=document_type,json=documentType,proto3" json:"document_type,omitempty"`
	Currency                    []*_type.ModelSpec `protobuf:"bytes,7,rep,name=currency,proto3" json:"currency,omitempty"`
	CreditCardLastFour          []*_type.ModelSpec `protobuf:"bytes,8,rep,name=credit_card_last_four,json=creditCardLastFour,proto3" json:"credit_card_last_four,omitempty"`
	PaymentMethod               []*_type.ModelSpec `protobuf:"bytes,9,rep,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	OcrLineDkType               []*_type.ModelSpec `protobuf:"bytes,10,rep,name=ocr_line_dk_type,json=ocrLineDkType,proto3" json:"ocr_line_dk_type,omitempty"`
	OcrLineDkPaymentId          []*_type.ModelSpec `protobuf:"bytes,11,rep,name=ocr_line_dk_payment_id,json=ocrLineDkPaymentId,proto3" json:"ocr_line_dk_payment_id,omitempty"`
	OcrLineDkCreditorId         []*_type.ModelSpec `protobuf:"bytes,12,rep,name=ocr_line_dk_creditor_id,json=ocrLineDkCreditorId,proto3" json:"ocr_line_dk_creditor_id,omitempty"`
	OcrLineSePaymentId          []*_type.ModelSpec `protobuf:"bytes,13,rep,name=ocr_line_se_payment_id,json=ocrLineSePaymentId,proto3" json:"ocr_line_se_payment_id,omitempty"`
	OcrLineSeBankgiroCreditorId []*_type.ModelSpec `protobuf:"bytes,14,rep,name=ocr_line_se_bankgiro_creditor_id,json=ocrLineSeBankgiroCreditorId,proto3" json:"ocr_line_se_bankgiro_creditor_id,omitempty"`
	OcrLineSePlusgiroCreditorId []*_type.ModelSpec `protobuf:"bytes,15,rep,name=ocr_line_se_plusgiro_creditor_id,json=ocrLineSePlusgiroCreditorId,proto3" json:"ocr_line_se_plusgiro_creditor_id,omitempty"`
	OcrLineNoPaymentId          []*_type.ModelSpec `protobuf:"bytes,16,rep,name=ocr_line_no_payment_id,json=ocrLineNoPaymentId,proto3" json:"ocr_line_no_payment_id,omitempty"`
	OcrLineFiPaymentId          []*_type.ModelSpec `protobuf:"bytes,17,rep,name=ocr_line_fi_payment_id,json=ocrLineFiPaymentId,proto3" json:"ocr_line_fi_payment_id,omitempty"`
	OcrLineNlPaymentId          []*_type.ModelSpec `protobuf:"bytes,18,rep,name=ocr_line_nl_payment_id,json=ocrLineNlPaymentId,proto3" json:"ocr_line_nl_payment_id,omitempty"`
	SupplierCorporateId         []*_type.ModelSpec `protobuf:"bytes,19,rep,name=supplier_corporate_id,json=supplierCorporateId,proto3" json:"supplier_corporate_id,omitempty"`
	SupplierCountryCode         []*_type.ModelSpec `protobuf:"bytes,20,rep,name=supplier_country_code,json=supplierCountryCode,proto3" json:"supplier_country_code,omitempty"`
	InvoiceNumber               []*_type.ModelSpec `protobuf:"bytes,21,rep,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	Iban                        []*_type.ModelSpec `protobuf:"bytes,22,rep,name=iban,proto3" json:"iban,omitempty"`
	OrderReference              []*_type.ModelSpec `protobuf:"bytes,23,rep,name=order_reference,json=orderReference,proto3" json:"order_reference,omitempty"`
	BankAccountNumber           []*_type.ModelSpec `protobuf:"bytes,24,rep,name=bank_account_number,json=bankAccountNumber,proto3" json:"bank_account_number,omitempty"`
	BankRegistrationNumber      []*_type.ModelSpec `protobuf:"bytes,25,rep,name=bank_registration_number,json=bankRegistrationNumber,proto3" json:"bank_registration_number,omitempty"`
	SupplierName                []*_type.ModelSpec `protobuf:"bytes,26,rep,name=supplier_name,json=supplierName,proto3" json:"supplier_name,omitempty"`
	Bic                         []*_type.ModelSpec `protobuf:"bytes,27,rep,name=bic,proto3" json:"bic,omitempty"`
	DocumentNumber              []*_type.ModelSpec `protobuf:"bytes,28,rep,name=document_number,json=documentNumber,proto3" json:"document_number,omitempty"`
	DocumentDate                []*_type.ModelSpec `protobuf:"bytes,29,rep,name=document_date,json=documentDate,proto3" json:"document_date,omitempty"`
	OrderNumber                 []*_type.ModelSpec `protobuf:"bytes,30,rep,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
	SupplierVatNumber           []*_type.ModelSpec `protobuf:"bytes,31,rep,name=supplier_vat_number,json=supplierVatNumber,proto3" json:"supplier_vat_number,omitempty"`
	SupplierOrganisationNumber  []*_type.ModelSpec `protobuf:"bytes,32,rep,name=supplier_organisation_number,json=supplierOrganisationNumber,proto3" json:"supplier_organisation_number,omitempty"`
	SupplierAddress             []*_type.ModelSpec `protobuf:"bytes,33,rep,name=supplier_address,json=supplierAddress,proto3" json:"supplier_address,omitempty"`
	CustomerNumber              []*_type.ModelSpec `protobuf:"bytes,34,rep,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ReceiverOrderNumber         []*_type.ModelSpec `protobuf:"bytes,35,rep,name=receiver_order_number,json=receiverOrderNumber,proto3" json:"receiver_order_number,omitempty"`
	OcrLineBePaymentId          []*_type.ModelSpec `protobuf:"bytes,36,rep,name=ocr_line_be_payment_id,json=ocrLineBePaymentId,proto3" json:"ocr_line_be_payment_id,omitempty"`
	ReceiverAddress             []*_type.ModelSpec `protobuf:"bytes,37,rep,name=receiver_address,json=receiverAddress,proto3" json:"receiver_address,omitempty"`
	ReceiverCountryCode         []*_type.ModelSpec `protobuf:"bytes,38,rep,name=receiver_country_code,json=receiverCountryCode,proto3" json:"receiver_country_code,omitempty"`
	ReceiverName                []*_type.ModelSpec `protobuf:"bytes,39,rep,name=receiver_name,json=receiverName,proto3" json:"receiver_name,omitempty"`
	ReceiverVatNumber           []*_type.ModelSpec `protobuf:"bytes,40,rep,name=receiver_vat_number,json=receiverVatNumber,proto3" json:"receiver_vat_number,omitempty"`
	CheckInDate                 []*_type.ModelSpec `protobuf:"bytes,41,rep,name=check_in_date,json=checkInDate,proto3" json:"check_in_date,omitempty"`
	CheckOutDate                []*_type.ModelSpec `protobuf:"bytes,42,rep,name=check_out_date,json=checkOutDate,proto3" json:"check_out_date,omitempty"`
}

func (x *PredictionMetadata) Reset() {
	*x = PredictionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictionMetadata) ProtoMessage() {}

func (x *PredictionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictionMetadata.ProtoReflect.Descriptor instead.
func (*PredictionMetadata) Descriptor() ([]byte, []int) {
	return file_ssn_dataservice_v1_dataservice_proto_rawDescGZIP(), []int{4}
}

func (x *PredictionMetadata) GetTotalInclVat() []*_type.ModelSpec {
	if x != nil {
		return x.TotalInclVat
	}
	return nil
}

func (x *PredictionMetadata) GetTotalVat() []*_type.ModelSpec {
	if x != nil {
		return x.TotalVat
	}
	return nil
}

func (x *PredictionMetadata) GetTotalExclVat() []*_type.ModelSpec {
	if x != nil {
		return x.TotalExclVat
	}
	return nil
}

func (x *PredictionMetadata) GetOrderDate() []*_type.ModelSpec {
	if x != nil {
		return x.OrderDate
	}
	return nil
}

func (x *PredictionMetadata) GetPaymentDueDate() []*_type.ModelSpec {
	if x != nil {
		return x.PaymentDueDate
	}
	return nil
}

func (x *PredictionMetadata) GetDocumentType() []*_type.ModelSpec {
	if x != nil {
		return x.DocumentType
	}
	return nil
}

func (x *PredictionMetadata) GetCurrency() []*_type.ModelSpec {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *PredictionMetadata) GetCreditCardLastFour() []*_type.ModelSpec {
	if x != nil {
		return x.CreditCardLastFour
	}
	return nil
}

func (x *PredictionMetadata) GetPaymentMethod() []*_type.ModelSpec {
	if x != nil {
		return x.PaymentMethod
	}
	return nil
}

func (x *PredictionMetadata) GetOcrLineDkType() []*_type.ModelSpec {
	if x != nil {
		return x.OcrLineDkType
	}
	return nil
}

func (x *PredictionMetadata) GetOcrLineDkPaymentId() []*_type.ModelSpec {
	if x != nil {
		return x.OcrLineDkPaymentId
	}
	return nil
}

func (x *PredictionMetadata) GetOcrLineDkCreditorId() []*_type.ModelSpec {
	if x != nil {
		return x.OcrLineDkCreditorId
	}
	return nil
}

func (x *PredictionMetadata) GetOcrLineSePaymentId() []*_type.ModelSpec {
	if x != nil {
		return x.OcrLineSePaymentId
	}
	return nil
}

func (x *PredictionMetadata) GetOcrLineSeBankgiroCreditorId() []*_type.ModelSpec {
	if x != nil {
		return x.OcrLineSeBankgiroCreditorId
	}
	return nil
}

func (x *PredictionMetadata) GetOcrLineSePlusgiroCreditorId() []*_type.ModelSpec {
	if x != nil {
		return x.OcrLineSePlusgiroCreditorId
	}
	return nil
}

func (x *PredictionMetadata) GetOcrLineNoPaymentId() []*_type.ModelSpec {
	if x != nil {
		return x.OcrLineNoPaymentId
	}
	return nil
}

func (x *PredictionMetadata) GetOcrLineFiPaymentId() []*_type.ModelSpec {
	if x != nil {
		return x.OcrLineFiPaymentId
	}
	return nil
}

func (x *PredictionMetadata) GetOcrLineNlPaymentId() []*_type.ModelSpec {
	if x != nil {
		return x.OcrLineNlPaymentId
	}
	return nil
}

func (x *PredictionMetadata) GetSupplierCorporateId() []*_type.ModelSpec {
	if x != nil {
		return x.SupplierCorporateId
	}
	return nil
}

func (x *PredictionMetadata) GetSupplierCountryCode() []*_type.ModelSpec {
	if x != nil {
		return x.SupplierCountryCode
	}
	return nil
}

func (x *PredictionMetadata) GetInvoiceNumber() []*_type.ModelSpec {
	if x != nil {
		return x.InvoiceNumber
	}
	return nil
}

func (x *PredictionMetadata) GetIban() []*_type.ModelSpec {
	if x != nil {
		return x.Iban
	}
	return nil
}

func (x *PredictionMetadata) GetOrderReference() []*_type.ModelSpec {
	if x != nil {
		return x.OrderReference
	}
	return nil
}

func (x *PredictionMetadata) GetBankAccountNumber() []*_type.ModelSpec {
	if x != nil {
		return x.BankAccountNumber
	}
	return nil
}

func (x *PredictionMetadata) GetBankRegistrationNumber() []*_type.ModelSpec {
	if x != nil {
		return x.BankRegistrationNumber
	}
	return nil
}

func (x *PredictionMetadata) GetSupplierName() []*_type.ModelSpec {
	if x != nil {
		return x.SupplierName
	}
	return nil
}

func (x *PredictionMetadata) GetBic() []*_type.ModelSpec {
	if x != nil {
		return x.Bic
	}
	return nil
}

func (x *PredictionMetadata) GetDocumentNumber() []*_type.ModelSpec {
	if x != nil {
		return x.DocumentNumber
	}
	return nil
}

func (x *PredictionMetadata) GetDocumentDate() []*_type.ModelSpec {
	if x != nil {
		return x.DocumentDate
	}
	return nil
}

func (x *PredictionMetadata) GetOrderNumber() []*_type.ModelSpec {
	if x != nil {
		return x.OrderNumber
	}
	return nil
}

func (x *PredictionMetadata) GetSupplierVatNumber() []*_type.ModelSpec {
	if x != nil {
		return x.SupplierVatNumber
	}
	return nil
}

func (x *PredictionMetadata) GetSupplierOrganisationNumber() []*_type.ModelSpec {
	if x != nil {
		return x.SupplierOrganisationNumber
	}
	return nil
}

func (x *PredictionMetadata) GetSupplierAddress() []*_type.ModelSpec {
	if x != nil {
		return x.SupplierAddress
	}
	return nil
}

func (x *PredictionMetadata) GetCustomerNumber() []*_type.ModelSpec {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *PredictionMetadata) GetReceiverOrderNumber() []*_type.ModelSpec {
	if x != nil {
		return x.ReceiverOrderNumber
	}
	return nil
}

func (x *PredictionMetadata) GetOcrLineBePaymentId() []*_type.ModelSpec {
	if x != nil {
		return x.OcrLineBePaymentId
	}
	return nil
}

func (x *PredictionMetadata) GetReceiverAddress() []*_type.ModelSpec {
	if x != nil {
		return x.ReceiverAddress
	}
	return nil
}

func (x *PredictionMetadata) GetReceiverCountryCode() []*_type.ModelSpec {
	if x != nil {
		return x.ReceiverCountryCode
	}
	return nil
}

func (x *PredictionMetadata) GetReceiverName() []*_type.ModelSpec {
	if x != nil {
		return x.ReceiverName
	}
	return nil
}

func (x *PredictionMetadata) GetReceiverVatNumber() []*_type.ModelSpec {
	if x != nil {
		return x.ReceiverVatNumber
	}
	return nil
}

func (x *PredictionMetadata) GetCheckInDate() []*_type.ModelSpec {
	if x != nil {
		return x.CheckInDate
	}
	return nil
}

func (x *PredictionMetadata) GetCheckOutDate() []*_type.ModelSpec {
	if x != nil {
		return x.CheckOutDate
	}
	return nil
}

type CreateDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Document *Document `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
}

func (x *CreateDocumentRequest) Reset() {
	*x = CreateDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDocumentRequest) ProtoMessage() {}

func (x *CreateDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDocumentRequest.ProtoReflect.Descriptor instead.
func (*CreateDocumentRequest) Descriptor() ([]byte, []int) {
	return file_ssn_dataservice_v1_dataservice_proto_rawDescGZIP(), []int{5}
}

func (x *CreateDocumentRequest) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

type CreateDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateDocumentResponse) Reset() {
	*x = CreateDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDocumentResponse) ProtoMessage() {}

func (x *CreateDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDocumentResponse.ProtoReflect.Descriptor instead.
func (*CreateDocumentResponse) Descriptor() ([]byte, []int) {
	return file_ssn_dataservice_v1_dataservice_proto_rawDescGZIP(), []int{6}
}

func (x *CreateDocumentResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReadDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReadDocumentRequest) Reset() {
	*x = ReadDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDocumentRequest) ProtoMessage() {}

func (x *ReadDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDocumentRequest.ProtoReflect.Descriptor instead.
func (*ReadDocumentRequest) Descriptor() ([]byte, []int) {
	return file_ssn_dataservice_v1_dataservice_proto_rawDescGZIP(), []int{7}
}

func (x *ReadDocumentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReadDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Document *Document `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
}

func (x *ReadDocumentResponse) Reset() {
	*x = ReadDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDocumentResponse) ProtoMessage() {}

func (x *ReadDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDocumentResponse.ProtoReflect.Descriptor instead.
func (*ReadDocumentResponse) Descriptor() ([]byte, []int) {
	return file_ssn_dataservice_v1_dataservice_proto_rawDescGZIP(), []int{8}
}

func (x *ReadDocumentResponse) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

type PrepareFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ta                 *_type.TextAnnotation  `protobuf:"bytes,2,opt,name=ta,proto3" json:"ta,omitempty"`
	DocumentBytes      []byte                 `protobuf:"bytes,3,opt,name=document_bytes,json=documentBytes,proto3" json:"document_bytes,omitempty"`
	Predictions        *PredictionValues      `protobuf:"bytes,4,opt,name=predictions,proto3" json:"predictions,omitempty"`
	Tags               []string               `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	Confidences        *PredictionConfidences `protobuf:"bytes,6,opt,name=confidences,proto3" json:"confidences,omitempty"`
	PredictionMetadata *PredictionMetadata    `protobuf:"bytes,7,opt,name=prediction_metadata,json=predictionMetadata,proto3" json:"prediction_metadata,omitempty"`
	Tier               _type.Tier             `protobuf:"varint,8,opt,name=tier,proto3,enum=ssn.type.Tier" json:"tier,omitempty"`
	Segments           []string               `protobuf:"bytes,9,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *PrepareFeedbackRequest) Reset() {
	*x = PrepareFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareFeedbackRequest) ProtoMessage() {}

func (x *PrepareFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareFeedbackRequest.ProtoReflect.Descriptor instead.
func (*PrepareFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_ssn_dataservice_v1_dataservice_proto_rawDescGZIP(), []int{9}
}

func (x *PrepareFeedbackRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PrepareFeedbackRequest) GetTa() *_type.TextAnnotation {
	if x != nil {
		return x.Ta
	}
	return nil
}

func (x *PrepareFeedbackRequest) GetDocumentBytes() []byte {
	if x != nil {
		return x.DocumentBytes
	}
	return nil
}

func (x *PrepareFeedbackRequest) GetPredictions() *PredictionValues {
	if x != nil {
		return x.Predictions
	}
	return nil
}

func (x *PrepareFeedbackRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PrepareFeedbackRequest) GetConfidences() *PredictionConfidences {
	if x != nil {
		return x.Confidences
	}
	return nil
}

func (x *PrepareFeedbackRequest) GetPredictionMetadata() *PredictionMetadata {
	if x != nil {
		return x.PredictionMetadata
	}
	return nil
}

func (x *PrepareFeedbackRequest) GetTier() _type.Tier {
	if x != nil {
		return x.Tier
	}
	return _type.Tier(0)
}

func (x *PrepareFeedbackRequest) GetSegments() []string {
	if x != nil {
		return x.Segments
	}
	return nil
}

type FeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TrueValues *TrueValues `protobuf:"bytes,2,opt,name=true_values,json=trueValues,proto3" json:"true_values,omitempty"`
	Tags       []string    `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *FeedbackRequest) Reset() {
	*x = FeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackRequest) ProtoMessage() {}

func (x *FeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackRequest.ProtoReflect.Descriptor instead.
func (*FeedbackRequest) Descriptor() ([]byte, []int) {
	return file_ssn_dataservice_v1_dataservice_proto_rawDescGZIP(), []int{10}
}

func (x *FeedbackRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FeedbackRequest) GetTrueValues() *TrueValues {
	if x != nil {
		return x.TrueValues
	}
	return nil
}

func (x *FeedbackRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type FeedbackMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime     int64    `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int64    `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Fields        []string `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
	Tags          []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	CountryCodes  []string `protobuf:"bytes,6,rep,name=country_codes,json=countryCodes,proto3" json:"country_codes,omitempty"`
	DocumentTypes []string `protobuf:"bytes,7,rep,name=document_types,json=documentTypes,proto3" json:"document_types,omitempty"`
}

func (x *FeedbackMetricsRequest) Reset() {
	*x = FeedbackMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedbackMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackMetricsRequest) ProtoMessage() {}

func (x *FeedbackMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackMetricsRequest.ProtoReflect.Descriptor instead.
func (*FeedbackMetricsRequest) Descriptor() ([]byte, []int) {
	return file_ssn_dataservice_v1_dataservice_proto_rawDescGZIP(), []int{11}
}

func (x *FeedbackMetricsRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FeedbackMetricsRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *FeedbackMetricsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *FeedbackMetricsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FeedbackMetricsRequest) GetCountryCodes() []string {
	if x != nil {
		return x.CountryCodes
	}
	return nil
}

func (x *FeedbackMetricsRequest) GetDocumentTypes() []string {
	if x != nil {
		return x.DocumentTypes
	}
	return nil
}

type PredictionMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields        []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	CountryCodes  []string `protobuf:"bytes,2,rep,name=country_codes,json=countryCodes,proto3" json:"country_codes,omitempty"`
	DocumentTypes []string `protobuf:"bytes,3,rep,name=document_types,json=documentTypes,proto3" json:"document_types,omitempty"`
}

func (x *PredictionMetricsRequest) Reset() {
	*x = PredictionMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictionMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictionMetricsRequest) ProtoMessage() {}

func (x *PredictionMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictionMetricsRequest.ProtoReflect.Descriptor instead.
func (*PredictionMetricsRequest) Descriptor() ([]byte, []int) {
	return file_ssn_dataservice_v1_dataservice_proto_rawDescGZIP(), []int{12}
}

func (x *PredictionMetricsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PredictionMetricsRequest) GetCountryCodes() []string {
	if x != nil {
		return x.CountryCodes
	}
	return nil
}

func (x *PredictionMetricsRequest) GetDocumentTypes() []string {
	if x != nil {
		return x.DocumentTypes
	}
	return nil
}

type SsnMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentCount      int32               `protobuf:"varint,1,opt,name=document_count,json=documentCount,proto3" json:"document_count,omitempty"`
	TrueValueCount     int32               `protobuf:"varint,2,opt,name=true_value_count,json=trueValueCount,proto3" json:"true_value_count,omitempty"`
	OverallCorrectness []*Correctness      `protobuf:"bytes,3,rep,name=overall_correctness,json=overallCorrectness,proto3" json:"overall_correctness,omitempty"`
	FieldCorrectness   []*Correctness      `protobuf:"bytes,4,rep,name=field_correctness,json=fieldCorrectness,proto3" json:"field_correctness,omitempty"`
	Differences        []*FieldsComparison `protobuf:"bytes,5,rep,name=differences,proto3" json:"differences,omitempty"`
}

func (x *SsnMetrics) Reset() {
	*x = SsnMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsnMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsnMetrics) ProtoMessage() {}

func (x *SsnMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsnMetrics.ProtoReflect.Descriptor instead.
func (*SsnMetrics) Descriptor() ([]byte, []int) {
	return file_ssn_dataservice_v1_dataservice_proto_rawDescGZIP(), []int{13}
}

func (x *SsnMetrics) GetDocumentCount() int32 {
	if x != nil {
		return x.DocumentCount
	}
	return 0
}

func (x *SsnMetrics) GetTrueValueCount() int32 {
	if x != nil {
		return x.TrueValueCount
	}
	return 0
}

func (x *SsnMetrics) GetOverallCorrectness() []*Correctness {
	if x != nil {
		return x.OverallCorrectness
	}
	return nil
}

func (x *SsnMetrics) GetFieldCorrectness() []*Correctness {
	if x != nil {
		return x.FieldCorrectness
	}
	return nil
}

func (x *SsnMetrics) GetDifferences() []*FieldsComparison {
	if x != nil {
		return x.Differences
	}
	return nil
}

type FieldsComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BqId            string `protobuf:"bytes,1,opt,name=bq_id,json=bqId,proto3" json:"bq_id,omitempty"`
	TaskId          string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	FieldName       string `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	TrueValue       string `protobuf:"bytes,4,opt,name=true_value,json=trueValue,proto3" json:"true_value,omitempty"`
	PredictionValue string `protobuf:"bytes,5,opt,name=prediction_value,json=predictionValue,proto3" json:"prediction_value,omitempty"`
	Result          bool   `protobuf:"varint,6,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *FieldsComparison) Reset() {
	*x = FieldsComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldsComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldsComparison) ProtoMessage() {}

func (x *FieldsComparison) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldsComparison.ProtoReflect.Descriptor instead.
func (*FieldsComparison) Descriptor() ([]byte, []int) {
	return file_ssn_dataservice_v1_dataservice_proto_rawDescGZIP(), []int{14}
}

func (x *FieldsComparison) GetBqId() string {
	if x != nil {
		return x.BqId
	}
	return ""
}

func (x *FieldsComparison) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *FieldsComparison) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *FieldsComparison) GetTrueValue() string {
	if x != nil {
		return x.TrueValue
	}
	return ""
}

func (x *FieldsComparison) GetPredictionValue() string {
	if x != nil {
		return x.PredictionValue
	}
	return ""
}

func (x *FieldsComparison) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type Correctness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field                string  `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	CorrectPercentage    float32 `protobuf:"fixed32,2,opt,name=correct_percentage,json=correctPercentage,proto3" json:"correct_percentage,omitempty"`
	IncompletePercentage float32 `protobuf:"fixed32,3,opt,name=incomplete_percentage,json=incompletePercentage,proto3" json:"incomplete_percentage,omitempty"`
	ErrorPercentage      float32 `protobuf:"fixed32,4,opt,name=error_percentage,json=errorPercentage,proto3" json:"error_percentage,omitempty"`
	Support              int32   `protobuf:"varint,5,opt,name=support,proto3" json:"support,omitempty"`
}

func (x *Correctness) Reset() {
	*x = Correctness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Correctness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Correctness) ProtoMessage() {}

func (x *Correctness) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Correctness.ProtoReflect.Descriptor instead.
func (*Correctness) Descriptor() ([]byte, []int) {
	return file_ssn_dataservice_v1_dataservice_proto_rawDescGZIP(), []int{15}
}

func (x *Correctness) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Correctness) GetCorrectPercentage() float32 {
	if x != nil {
		return x.CorrectPercentage
	}
	return 0
}

func (x *Correctness) GetIncompletePercentage() float32 {
	if x != nil {
		return x.IncompletePercentage
	}
	return 0
}

func (x *Correctness) GetErrorPercentage() float32 {
	if x != nil {
		return x.ErrorPercentage
	}
	return 0
}

func (x *Correctness) GetSupport() int32 {
	if x != nil {
		return x.Support
	}
	return 0
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_ssn_dataservice_v1_dataservice_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CallsPerMonth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Calls     int64  `protobuf:"varint,1,opt,name=calls,proto3" json:"calls,omitempty"`
	MonthName string `protobuf:"bytes,2,opt,name=month_name,json=monthName,proto3" json:"month_name,omitempty"`
}

func (x *CallsPerMonth) Reset() {
	*x = CallsPerMonth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallsPerMonth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallsPerMonth) ProtoMessage() {}

func (x *CallsPerMonth) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallsPerMonth.ProtoReflect.Descriptor instead.
func (*CallsPerMonth) Descriptor() ([]byte, []int) {
	return file_ssn_dataservice_v1_dataservice_proto_rawDescGZIP(), []int{17}
}

func (x *CallsPerMonth) GetCalls() int64 {
	if x != nil {
		return x.Calls
	}
	return 0
}

func (x *CallsPerMonth) GetMonthName() string {
	if x != nil {
		return x.MonthName
	}
	return ""
}

type CallsPerMonthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallsPerMonth []*CallsPerMonth `protobuf:"bytes,1,rep,name=calls_per_month,json=callsPerMonth,proto3" json:"calls_per_month,omitempty"`
}

func (x *CallsPerMonthResponse) Reset() {
	*x = CallsPerMonthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallsPerMonthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallsPerMonthResponse) ProtoMessage() {}

func (x *CallsPerMonthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallsPerMonthResponse.ProtoReflect.Descriptor instead.
func (*CallsPerMonthResponse) Descriptor() ([]byte, []int) {
	return file_ssn_dataservice_v1_dataservice_proto_rawDescGZIP(), []int{18}
}

func (x *CallsPerMonthResponse) GetCallsPerMonth() []*CallsPerMonth {
	if x != nil {
		return x.CallsPerMonth
	}
	return nil
}

// Deprecated messages - kept for backward compatibility
type DeprecatedFeedbackMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentCount      int32          `protobuf:"varint,1,opt,name=document_count,json=documentCount,proto3" json:"document_count,omitempty"`
	FeedbackCount      int32          `protobuf:"varint,2,opt,name=feedback_count,json=feedbackCount,proto3" json:"feedback_count,omitempty"`
	OverallCorrectness *Correctness   `protobuf:"bytes,3,opt,name=overall_correctness,json=overallCorrectness,proto3" json:"overall_correctness,omitempty"`
	FieldCorrectness   []*Correctness `protobuf:"bytes,4,rep,name=field_correctness,json=fieldCorrectness,proto3" json:"field_correctness,omitempty"`
}

func (x *DeprecatedFeedbackMetrics) Reset() {
	*x = DeprecatedFeedbackMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeprecatedFeedbackMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeprecatedFeedbackMetrics) ProtoMessage() {}

func (x *DeprecatedFeedbackMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_dataservice_v1_dataservice_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeprecatedFeedbackMetrics.ProtoReflect.Descriptor instead.
func (*DeprecatedFeedbackMetrics) Descriptor() ([]byte, []int) {
	return file_ssn_dataservice_v1_dataservice_proto_rawDescGZIP(), []int{19}
}

func (x *DeprecatedFeedbackMetrics) GetDocumentCount() int32 {
	if x != nil {
		return x.DocumentCount
	}
	return 0
}

func (x *DeprecatedFeedbackMetrics) GetFeedbackCount() int32 {
	if x != nil {
		return x.FeedbackCount
	}
	return 0
}

func (x *DeprecatedFeedbackMetrics) GetOverallCorrectness() *Correctness {
	if x != nil {
		return x.OverallCorrectness
	}
	return nil
}

func (x *DeprecatedFeedbackMetrics) GetFieldCorrectness() []*Correctness {
	if x != nil {
		return x.FieldCorrectness
	}
	return nil
}

var File_ssn_dataservice_v1_dataservice_proto protoreflect.FileDescriptor

var file_ssn_dataservice_v1_dataservice_proto_rawDesc = []byte{
	0x0a, 0x24, 0x73, 0x73, 0x6e, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x73, 0x73, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x65, 0x6e, 0x5f,
	0x62, 0x71, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x62, 0x71, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x65, 0x6e, 0x5f, 0x62, 0x71,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x62, 0x71, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x73, 0x6e, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x73, 0x73, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x73, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x74, 0x69,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x05, 0x0a, 0x08, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x02, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0xea, 0x3f, 0x02,
	0x18, 0x01, 0x52, 0x02, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0xea, 0x3f, 0x02, 0x18, 0x01, 0x52, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2c, 0xea, 0x3f, 0x29, 0x08, 0x01, 0x22, 0x25, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x20, 0x49, 0x44, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x73, 0x20, 0x45, 0x6e, 0x76,
	0x6f, 0x79, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x05, 0xea, 0x3f, 0x02, 0x08, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x46, 0xea, 0x3f, 0x43, 0x22, 0x41, 0x54, 0x61, 0x67, 0x73, 0x20, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x2c, 0x20, 0x65, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x69, 0x66, 0x20, 0x76, 0x61, 0x6c, 0x65, 0x74, 0x6b,
	0x65, 0x79, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x75, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0a, 0x74, 0x72, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x51, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x73, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x10, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x10, 0xea, 0x3f, 0x0d,
	0x08, 0x01, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52, 0x0c, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x16, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x73,
	0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x15, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x57, 0x0a,
	0x13, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x73, 0x6e,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x12, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x12, 0xea, 0x3f, 0x0f, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8c, 0x1a, 0x0a, 0x0a, 0x54,
	0x72, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6c, 0x56, 0x61, 0x74, 0x12, 0x39, 0x0a,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x6c, 0x56, 0x61, 0x74, 0x12, 0x3b, 0x0a, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x42, 0x09, 0xea, 0x3f, 0x06, 0x12, 0x04, 0x44, 0x41, 0x54, 0x45, 0x52, 0x09,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x09, 0xea, 0x3f, 0x06, 0x12, 0x04, 0x44, 0x41, 0x54,
	0x45, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x41, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x4f,
	0x0a, 0x15, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x75, 0x72, 0x12,
	0x43, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x64, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6f, 0x63,
	0x72, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x6f,
	0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x6b, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69,
	0x6e, 0x65, 0x44, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x52, 0x0a,
	0x17, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x6b, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x6f, 0x63,
	0x72, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x50, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x20, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x73, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x67, 0x69, 0x72, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x6f, 0x63, 0x72,
	0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x67, 0x69, 0x72, 0x6f, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x20, 0x6f, 0x63, 0x72, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x67, 0x69, 0x72, 0x6f,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1b, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x67,
	0x69, 0x72, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x50, 0x0a,
	0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6f, 0x63, 0x72,
	0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x50, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x69, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6f,
	0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x50, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x6c,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04,
	0x69, 0x62, 0x61, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69, 0x62, 0x61, 0x6e, 0x12, 0x45,
	0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x18, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x16, 0x62, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0d, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x03, 0x62, 0x69, 0x63, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x62, 0x69, 0x63, 0x12, 0x45,
	0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42,
	0x09, 0xea, 0x3f, 0x06, 0x12, 0x04, 0x44, 0x41, 0x54, 0x45, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x13, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x56, 0x61,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x1c, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x45, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x16, 0x6f, 0x63, 0x72,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65,
	0x42, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x10, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x56, 0x61,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x33, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x76, 0x61, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x56, 0x61, 0x74, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x0f, 0x76, 0x61, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x09, 0xea,
	0x3f, 0x06, 0x12, 0x04, 0x44, 0x41, 0x54, 0x45, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f,
	0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x42, 0x09, 0xea, 0x3f, 0x06, 0x12, 0x04, 0x44, 0x41, 0x54, 0x45, 0x52, 0x0c, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x92, 0x1a, 0x0a, 0x10, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x42,
	0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x76, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6c, 0x56,
	0x61, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x74, 0x12, 0x42, 0x0a,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x5f, 0x76, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x6c, 0x56, 0x61,
	0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x09, 0xea, 0x3f, 0x06, 0x12, 0x04, 0x44,
	0x41, 0x54, 0x45, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x46,
	0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x09, 0xea, 0x3f, 0x06,
	0x12, 0x04, 0x44, 0x41, 0x54, 0x45, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x4f, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x72, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x12, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x73, 0x74,
	0x46, 0x6f, 0x75, 0x72, 0x12, 0x43, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x6f, 0x63, 0x72,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x50, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x6b, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12,
	0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x52, 0x0a, 0x17, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64,
	0x6b, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x13, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x6b, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x20, 0x6f, 0x63, 0x72, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x67, 0x69, 0x72, 0x6f,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1b, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x67,
	0x69, 0x72, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x63, 0x0a,
	0x20, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x75,
	0x73, 0x67, 0x69, 0x72, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65,
	0x50, 0x6c, 0x75, 0x73, 0x67, 0x69, 0x72, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x50, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e,
	0x6f, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x66, 0x69, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x6e, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6c, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x43,
	0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x15, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x0e,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x62, 0x61, 0x6e, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x69,
	0x62, 0x61, 0x6e, 0x12, 0x45, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x62, 0x61,
	0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x18, 0x62, 0x61, 0x6e, 0x6b,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x62, 0x61, 0x6e, 0x6b, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x41, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x62, 0x69, 0x63, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03,
	0x62, 0x69, 0x63, 0x12, 0x45, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0d, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x42, 0x09, 0xea, 0x3f, 0x06, 0x12, 0x04, 0x44, 0x41, 0x54, 0x45, 0x52,
	0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4c,
	0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x56, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x1c,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x20, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1a, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x10,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x15,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x50,
	0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x65, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6f, 0x63,
	0x72, 0x4c, 0x69, 0x6e, 0x65, 0x42, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x47, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x15, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c,
	0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x56, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0e,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x29,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18,
	0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x76, 0x61, 0x74,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x56,
	0x61, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x76, 0x61, 0x74, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x42, 0x09, 0xea, 0x3f, 0x06, 0x12, 0x04, 0x44, 0x41, 0x54, 0x45, 0x52, 0x0b, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x09, 0xea, 0x3f, 0x06, 0x12, 0x04, 0x44, 0x41, 0x54, 0x45,
	0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0xa1,
	0x18, 0x0a, 0x15, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x6c, 0x56, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x56, 0x61, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65,
	0x78, 0x63, 0x6c, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x45, 0x78, 0x63, 0x6c, 0x56, 0x61, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x4e, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x72, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x12, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x61,
	0x73, 0x74, 0x46, 0x6f, 0x75, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x6f, 0x63,
	0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x4f, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x6b, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6f,
	0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x51, 0x0a, 0x17, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x6b,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x13, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x20, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x73, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x67, 0x69, 0x72, 0x6f, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x6f, 0x63,
	0x72, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x67, 0x69, 0x72, 0x6f, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x20, 0x6f, 0x63, 0x72,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x67, 0x69, 0x72,
	0x6f, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1b, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x67,
	0x69, 0x72, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x4f, 0x0a,
	0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c,
	0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4f,
	0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x69, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6f, 0x63, 0x72,
	0x4c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x4f, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x6c, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6f, 0x63,
	0x72, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x4f, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x72,
	0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x4f, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x62, 0x61, 0x6e, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x69, 0x62, 0x61, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4b, 0x0a,
	0x13, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x18, 0x62, 0x61,
	0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x62, 0x61, 0x6e, 0x6b, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x62, 0x69, 0x63, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x62,
	0x69, 0x63, 0x12, 0x44, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x13, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x56, 0x61,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x1c, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x44,
	0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x23, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x62, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x42, 0x65, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4f,
	0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x40, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4b, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x61,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x56, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f,
	0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x41, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x22, 0xce, 0x15, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63,
	0x6c, 0x56, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x56, 0x61, 0x74, 0x12, 0x39, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x65, 0x78, 0x63, 0x6c, 0x5f, 0x76, 0x61, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x6c, 0x56, 0x61,
	0x74, 0x12, 0x32, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73,
	0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x46, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x12, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c,
	0x61, 0x73, 0x74, 0x46, 0x6f, 0x75, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x3c, 0x0a, 0x10, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x64, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x0d, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x47, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x6b,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x44,
	0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x17, 0x6f, 0x63,
	0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x6b, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73,
	0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x13, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x6b, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c,
	0x69, 0x6e, 0x65, 0x53, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5a,
	0x0a, 0x20, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x5f, 0x62, 0x61,
	0x6e, 0x6b, 0x67, 0x69, 0x72, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x1b, 0x6f,
	0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x67, 0x69, 0x72, 0x6f,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x20, 0x6f, 0x63,
	0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x67, 0x69,
	0x72, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x1b, 0x6f, 0x63, 0x72, 0x4c, 0x69,
	0x6e, 0x65, 0x53, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x67, 0x69, 0x72, 0x6f, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x12, 0x6f, 0x63, 0x72,
	0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x47, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x69, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x12, 0x6f,
	0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x47, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x43,
	0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x15, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x13,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73,
	0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x27, 0x0a, 0x04, 0x69, 0x62, 0x61, 0x6e, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x69, 0x62, 0x61, 0x6e, 0x12, 0x3c, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x13, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x11, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x18, 0x62,
	0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x16, 0x62, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0d, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x62, 0x69, 0x63, 0x18, 0x1b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x03, 0x62, 0x69, 0x63, 0x12, 0x3c, 0x0a, 0x0f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0d, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x13, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x11, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x56, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x55, 0x0a, 0x1c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x1a, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x23,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x47,
	0x0a, 0x16, 0x6f, 0x63, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x65, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x12, 0x6f, 0x63, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x42, 0x65, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x13, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x38, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x13, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x11, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x56, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x37, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0b, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x22, 0x51, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x28, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x25, 0x0a, 0x13, 0x52, 0x65, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x50, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xbb, 0x03, 0x0a, 0x16, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x02, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x74, 0x61, 0x12, 0x25,
	0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x73, 0x6e,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x4b, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x57,
	0x0a, 0x13, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x73,
	0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x12, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x76, 0x0a, 0x0f, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x72,
	0x75, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52,
	0x0a, 0x74, 0x72, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22,
	0xca, 0x01, 0x0a, 0x16, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x7e, 0x0a, 0x18,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xc5, 0x02, 0x0a,
	0x0a, 0x53, 0x73, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x72,
	0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x13,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x73, 0x6e, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x12, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x4c,
	0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x73, 0x6e, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x46, 0x0a, 0x0b,
	0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x62, 0x71, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x71, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x75, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2d,
	0x0a, 0x12, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a,
	0x15, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x23, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x44, 0x0a, 0x0d,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x62, 0x0a, 0x15, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x50,
	0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x50, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0x89, 0x02, 0x0a, 0x19, 0x44, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x50, 0x0a, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x52, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x4c, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x32, 0xba, 0x06, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x67, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0c, 0x52,
	0x65, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x73, 0x73,
	0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55,
	0x0a, 0x0f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x2a, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x67, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x23, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x3a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x6d,
	0x0a, 0x10, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x2a, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x71, 0x0a,
	0x21, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x2c, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x73, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x63, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x73, 0x73, 0x6e,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a,
	0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x3a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x50, 0x65,
	0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x29, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x50,
	0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0xdd, 0x01, 0x0a, 0x1b, 0x61, 0x69, 0x2e, 0x76, 0x69, 0x73, 0x6d, 0x61, 0x2e, 0x73, 0x73, 0x6e,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42,
	0x10, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x2f, 0x76, 0x6d, 0x6c, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x73, 0x6e, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xa2, 0x02, 0x03, 0x53, 0x44, 0x58, 0xaa, 0x02, 0x12,
	0x53, 0x73, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x12, 0x53, 0x73, 0x6e, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1e, 0x53, 0x73, 0x6e, 0x5c, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x53, 0x73, 0x6e, 0x3a, 0x3a,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ssn_dataservice_v1_dataservice_proto_rawDescOnce sync.Once
	file_ssn_dataservice_v1_dataservice_proto_rawDescData = file_ssn_dataservice_v1_dataservice_proto_rawDesc
)

func file_ssn_dataservice_v1_dataservice_proto_rawDescGZIP() []byte {
	file_ssn_dataservice_v1_dataservice_proto_rawDescOnce.Do(func() {
		file_ssn_dataservice_v1_dataservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_ssn_dataservice_v1_dataservice_proto_rawDescData)
	})
	return file_ssn_dataservice_v1_dataservice_proto_rawDescData
}

var file_ssn_dataservice_v1_dataservice_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_ssn_dataservice_v1_dataservice_proto_goTypes = []interface{}{
	(*Document)(nil),                       // 0: ssn.dataservice.v1.Document
	(*TrueValues)(nil),                     // 1: ssn.dataservice.v1.TrueValues
	(*PredictionValues)(nil),               // 2: ssn.dataservice.v1.PredictionValues
	(*PredictionConfidences)(nil),          // 3: ssn.dataservice.v1.PredictionConfidences
	(*PredictionMetadata)(nil),             // 4: ssn.dataservice.v1.PredictionMetadata
	(*CreateDocumentRequest)(nil),          // 5: ssn.dataservice.v1.CreateDocumentRequest
	(*CreateDocumentResponse)(nil),         // 6: ssn.dataservice.v1.CreateDocumentResponse
	(*ReadDocumentRequest)(nil),            // 7: ssn.dataservice.v1.ReadDocumentRequest
	(*ReadDocumentResponse)(nil),           // 8: ssn.dataservice.v1.ReadDocumentResponse
	(*PrepareFeedbackRequest)(nil),         // 9: ssn.dataservice.v1.PrepareFeedbackRequest
	(*FeedbackRequest)(nil),                // 10: ssn.dataservice.v1.FeedbackRequest
	(*FeedbackMetricsRequest)(nil),         // 11: ssn.dataservice.v1.FeedbackMetricsRequest
	(*PredictionMetricsRequest)(nil),       // 12: ssn.dataservice.v1.PredictionMetricsRequest
	(*SsnMetrics)(nil),                     // 13: ssn.dataservice.v1.SsnMetrics
	(*FieldsComparison)(nil),               // 14: ssn.dataservice.v1.FieldsComparison
	(*Correctness)(nil),                    // 15: ssn.dataservice.v1.Correctness
	(*DeleteRequest)(nil),                  // 16: ssn.dataservice.v1.DeleteRequest
	(*CallsPerMonth)(nil),                  // 17: ssn.dataservice.v1.CallsPerMonth
	(*CallsPerMonthResponse)(nil),          // 18: ssn.dataservice.v1.CallsPerMonthResponse
	(*DeprecatedFeedbackMetrics)(nil),      // 19: ssn.dataservice.v1.DeprecatedFeedbackMetrics
	(*_type.TextAnnotation)(nil),           // 20: ssn.type.TextAnnotation
	(*wrapperspb.DoubleValue)(nil),         // 21: google.protobuf.DoubleValue
	(*date.Date)(nil),                      // 22: google.type.Date
	(*wrapperspb.StringValue)(nil),         // 23: google.protobuf.StringValue
	(*_type.PurchaseLineCandidate)(nil),    // 24: ssn.type.PurchaseLineCandidate
	(*_type.AnswerCandidate)(nil),          // 25: ssn.type.AnswerCandidate
	(*_type.VatDistributionCandidate)(nil), // 26: ssn.type.VatDistributionCandidate
	(*wrapperspb.FloatValue)(nil),          // 27: google.protobuf.FloatValue
	(*_type.ModelSpec)(nil),                // 28: ssn.type.ModelSpec
	(_type.Tier)(0),                        // 29: ssn.type.Tier
	(*emptypb.Empty)(nil),                  // 30: google.protobuf.Empty
}
var file_ssn_dataservice_v1_dataservice_proto_depIdxs = []int32{
	20,  // 0: ssn.dataservice.v1.Document.ta:type_name -> ssn.type.TextAnnotation
	1,   // 1: ssn.dataservice.v1.Document.true_values:type_name -> ssn.dataservice.v1.TrueValues
	2,   // 2: ssn.dataservice.v1.Document.prediction_values:type_name -> ssn.dataservice.v1.PredictionValues
	3,   // 3: ssn.dataservice.v1.Document.prediction_confidences:type_name -> ssn.dataservice.v1.PredictionConfidences
	4,   // 4: ssn.dataservice.v1.Document.prediction_metadata:type_name -> ssn.dataservice.v1.PredictionMetadata
	21,  // 5: ssn.dataservice.v1.TrueValues.total_incl_vat:type_name -> google.protobuf.DoubleValue
	21,  // 6: ssn.dataservice.v1.TrueValues.total_vat:type_name -> google.protobuf.DoubleValue
	21,  // 7: ssn.dataservice.v1.TrueValues.total_excl_vat:type_name -> google.protobuf.DoubleValue
	22,  // 8: ssn.dataservice.v1.TrueValues.order_date:type_name -> google.type.Date
	22,  // 9: ssn.dataservice.v1.TrueValues.payment_due_date:type_name -> google.type.Date
	23,  // 10: ssn.dataservice.v1.TrueValues.document_type:type_name -> google.protobuf.StringValue
	23,  // 11: ssn.dataservice.v1.TrueValues.currency:type_name -> google.protobuf.StringValue
	23,  // 12: ssn.dataservice.v1.TrueValues.credit_card_last_four:type_name -> google.protobuf.StringValue
	23,  // 13: ssn.dataservice.v1.TrueValues.payment_method:type_name -> google.protobuf.StringValue
	23,  // 14: ssn.dataservice.v1.TrueValues.ocr_line_dk_type:type_name -> google.protobuf.StringValue
	23,  // 15: ssn.dataservice.v1.TrueValues.ocr_line_dk_payment_id:type_name -> google.protobuf.StringValue
	23,  // 16: ssn.dataservice.v1.TrueValues.ocr_line_dk_creditor_id:type_name -> google.protobuf.StringValue
	23,  // 17: ssn.dataservice.v1.TrueValues.ocr_line_se_payment_id:type_name -> google.protobuf.StringValue
	23,  // 18: ssn.dataservice.v1.TrueValues.ocr_line_se_bankgiro_creditor_id:type_name -> google.protobuf.StringValue
	23,  // 19: ssn.dataservice.v1.TrueValues.ocr_line_se_plusgiro_creditor_id:type_name -> google.protobuf.StringValue
	23,  // 20: ssn.dataservice.v1.TrueValues.ocr_line_no_payment_id:type_name -> google.protobuf.StringValue
	23,  // 21: ssn.dataservice.v1.TrueValues.ocr_line_fi_payment_id:type_name -> google.protobuf.StringValue
	23,  // 22: ssn.dataservice.v1.TrueValues.ocr_line_nl_payment_id:type_name -> google.protobuf.StringValue
	23,  // 23: ssn.dataservice.v1.TrueValues.supplier_corporate_id:type_name -> google.protobuf.StringValue
	23,  // 24: ssn.dataservice.v1.TrueValues.supplier_country_code:type_name -> google.protobuf.StringValue
	23,  // 25: ssn.dataservice.v1.TrueValues.invoice_number:type_name -> google.protobuf.StringValue
	23,  // 26: ssn.dataservice.v1.TrueValues.iban:type_name -> google.protobuf.StringValue
	23,  // 27: ssn.dataservice.v1.TrueValues.order_reference:type_name -> google.protobuf.StringValue
	23,  // 28: ssn.dataservice.v1.TrueValues.bank_account_number:type_name -> google.protobuf.StringValue
	23,  // 29: ssn.dataservice.v1.TrueValues.bank_registration_number:type_name -> google.protobuf.StringValue
	23,  // 30: ssn.dataservice.v1.TrueValues.supplier_name:type_name -> google.protobuf.StringValue
	23,  // 31: ssn.dataservice.v1.TrueValues.bic:type_name -> google.protobuf.StringValue
	23,  // 32: ssn.dataservice.v1.TrueValues.document_number:type_name -> google.protobuf.StringValue
	22,  // 33: ssn.dataservice.v1.TrueValues.document_date:type_name -> google.type.Date
	23,  // 34: ssn.dataservice.v1.TrueValues.order_number:type_name -> google.protobuf.StringValue
	23,  // 35: ssn.dataservice.v1.TrueValues.supplier_vat_number:type_name -> google.protobuf.StringValue
	23,  // 36: ssn.dataservice.v1.TrueValues.supplier_organisation_number:type_name -> google.protobuf.StringValue
	23,  // 37: ssn.dataservice.v1.TrueValues.supplier_address:type_name -> google.protobuf.StringValue
	23,  // 38: ssn.dataservice.v1.TrueValues.customer_number:type_name -> google.protobuf.StringValue
	23,  // 39: ssn.dataservice.v1.TrueValues.receiver_order_number:type_name -> google.protobuf.StringValue
	23,  // 40: ssn.dataservice.v1.TrueValues.ocr_line_be_payment_id:type_name -> google.protobuf.StringValue
	23,  // 41: ssn.dataservice.v1.TrueValues.receiver_address:type_name -> google.protobuf.StringValue
	23,  // 42: ssn.dataservice.v1.TrueValues.receiver_country_code:type_name -> google.protobuf.StringValue
	23,  // 43: ssn.dataservice.v1.TrueValues.receiver_name:type_name -> google.protobuf.StringValue
	23,  // 44: ssn.dataservice.v1.TrueValues.receiver_vat_number:type_name -> google.protobuf.StringValue
	24,  // 45: ssn.dataservice.v1.TrueValues.purchase_lines:type_name -> ssn.type.PurchaseLineCandidate
	25,  // 46: ssn.dataservice.v1.TrueValues.answers:type_name -> ssn.type.AnswerCandidate
	26,  // 47: ssn.dataservice.v1.TrueValues.vat_distribution:type_name -> ssn.type.VatDistributionCandidate
	22,  // 48: ssn.dataservice.v1.TrueValues.check_in_date:type_name -> google.type.Date
	22,  // 49: ssn.dataservice.v1.TrueValues.check_out_date:type_name -> google.type.Date
	21,  // 50: ssn.dataservice.v1.PredictionValues.total_incl_vat:type_name -> google.protobuf.DoubleValue
	21,  // 51: ssn.dataservice.v1.PredictionValues.total_vat:type_name -> google.protobuf.DoubleValue
	21,  // 52: ssn.dataservice.v1.PredictionValues.total_excl_vat:type_name -> google.protobuf.DoubleValue
	22,  // 53: ssn.dataservice.v1.PredictionValues.order_date:type_name -> google.type.Date
	22,  // 54: ssn.dataservice.v1.PredictionValues.payment_due_date:type_name -> google.type.Date
	23,  // 55: ssn.dataservice.v1.PredictionValues.document_type:type_name -> google.protobuf.StringValue
	23,  // 56: ssn.dataservice.v1.PredictionValues.currency:type_name -> google.protobuf.StringValue
	23,  // 57: ssn.dataservice.v1.PredictionValues.credit_card_last_four:type_name -> google.protobuf.StringValue
	23,  // 58: ssn.dataservice.v1.PredictionValues.payment_method:type_name -> google.protobuf.StringValue
	23,  // 59: ssn.dataservice.v1.PredictionValues.ocr_line_dk_type:type_name -> google.protobuf.StringValue
	23,  // 60: ssn.dataservice.v1.PredictionValues.ocr_line_dk_payment_id:type_name -> google.protobuf.StringValue
	23,  // 61: ssn.dataservice.v1.PredictionValues.ocr_line_dk_creditor_id:type_name -> google.protobuf.StringValue
	23,  // 62: ssn.dataservice.v1.PredictionValues.ocr_line_se_payment_id:type_name -> google.protobuf.StringValue
	23,  // 63: ssn.dataservice.v1.PredictionValues.ocr_line_se_bankgiro_creditor_id:type_name -> google.protobuf.StringValue
	23,  // 64: ssn.dataservice.v1.PredictionValues.ocr_line_se_plusgiro_creditor_id:type_name -> google.protobuf.StringValue
	23,  // 65: ssn.dataservice.v1.PredictionValues.ocr_line_no_payment_id:type_name -> google.protobuf.StringValue
	23,  // 66: ssn.dataservice.v1.PredictionValues.ocr_line_fi_payment_id:type_name -> google.protobuf.StringValue
	23,  // 67: ssn.dataservice.v1.PredictionValues.ocr_line_nl_payment_id:type_name -> google.protobuf.StringValue
	23,  // 68: ssn.dataservice.v1.PredictionValues.supplier_corporate_id:type_name -> google.protobuf.StringValue
	23,  // 69: ssn.dataservice.v1.PredictionValues.supplier_country_code:type_name -> google.protobuf.StringValue
	23,  // 70: ssn.dataservice.v1.PredictionValues.invoice_number:type_name -> google.protobuf.StringValue
	23,  // 71: ssn.dataservice.v1.PredictionValues.iban:type_name -> google.protobuf.StringValue
	23,  // 72: ssn.dataservice.v1.PredictionValues.order_reference:type_name -> google.protobuf.StringValue
	23,  // 73: ssn.dataservice.v1.PredictionValues.bank_account_number:type_name -> google.protobuf.StringValue
	23,  // 74: ssn.dataservice.v1.PredictionValues.bank_registration_number:type_name -> google.protobuf.StringValue
	23,  // 75: ssn.dataservice.v1.PredictionValues.supplier_name:type_name -> google.protobuf.StringValue
	23,  // 76: ssn.dataservice.v1.PredictionValues.bic:type_name -> google.protobuf.StringValue
	23,  // 77: ssn.dataservice.v1.PredictionValues.document_number:type_name -> google.protobuf.StringValue
	22,  // 78: ssn.dataservice.v1.PredictionValues.document_date:type_name -> google.type.Date
	23,  // 79: ssn.dataservice.v1.PredictionValues.order_number:type_name -> google.protobuf.StringValue
	23,  // 80: ssn.dataservice.v1.PredictionValues.supplier_vat_number:type_name -> google.protobuf.StringValue
	23,  // 81: ssn.dataservice.v1.PredictionValues.supplier_organisation_number:type_name -> google.protobuf.StringValue
	23,  // 82: ssn.dataservice.v1.PredictionValues.supplier_address:type_name -> google.protobuf.StringValue
	23,  // 83: ssn.dataservice.v1.PredictionValues.customer_number:type_name -> google.protobuf.StringValue
	23,  // 84: ssn.dataservice.v1.PredictionValues.receiver_order_number:type_name -> google.protobuf.StringValue
	23,  // 85: ssn.dataservice.v1.PredictionValues.ocr_line_be_payment_id:type_name -> google.protobuf.StringValue
	23,  // 86: ssn.dataservice.v1.PredictionValues.receiver_address:type_name -> google.protobuf.StringValue
	23,  // 87: ssn.dataservice.v1.PredictionValues.receiver_country_code:type_name -> google.protobuf.StringValue
	23,  // 88: ssn.dataservice.v1.PredictionValues.receiver_name:type_name -> google.protobuf.StringValue
	23,  // 89: ssn.dataservice.v1.PredictionValues.receiver_vat_number:type_name -> google.protobuf.StringValue
	24,  // 90: ssn.dataservice.v1.PredictionValues.purchase_lines:type_name -> ssn.type.PurchaseLineCandidate
	25,  // 91: ssn.dataservice.v1.PredictionValues.answers:type_name -> ssn.type.AnswerCandidate
	26,  // 92: ssn.dataservice.v1.PredictionValues.vat_distribution:type_name -> ssn.type.VatDistributionCandidate
	22,  // 93: ssn.dataservice.v1.PredictionValues.check_in_date:type_name -> google.type.Date
	22,  // 94: ssn.dataservice.v1.PredictionValues.check_out_date:type_name -> google.type.Date
	27,  // 95: ssn.dataservice.v1.PredictionConfidences.total_incl_vat:type_name -> google.protobuf.FloatValue
	27,  // 96: ssn.dataservice.v1.PredictionConfidences.total_vat:type_name -> google.protobuf.FloatValue
	27,  // 97: ssn.dataservice.v1.PredictionConfidences.total_excl_vat:type_name -> google.protobuf.FloatValue
	27,  // 98: ssn.dataservice.v1.PredictionConfidences.order_date:type_name -> google.protobuf.FloatValue
	27,  // 99: ssn.dataservice.v1.PredictionConfidences.payment_due_date:type_name -> google.protobuf.FloatValue
	27,  // 100: ssn.dataservice.v1.PredictionConfidences.document_type:type_name -> google.protobuf.FloatValue
	27,  // 101: ssn.dataservice.v1.PredictionConfidences.currency:type_name -> google.protobuf.FloatValue
	27,  // 102: ssn.dataservice.v1.PredictionConfidences.credit_card_last_four:type_name -> google.protobuf.FloatValue
	27,  // 103: ssn.dataservice.v1.PredictionConfidences.payment_method:type_name -> google.protobuf.FloatValue
	27,  // 104: ssn.dataservice.v1.PredictionConfidences.ocr_line_dk_type:type_name -> google.protobuf.FloatValue
	27,  // 105: ssn.dataservice.v1.PredictionConfidences.ocr_line_dk_payment_id:type_name -> google.protobuf.FloatValue
	27,  // 106: ssn.dataservice.v1.PredictionConfidences.ocr_line_dk_creditor_id:type_name -> google.protobuf.FloatValue
	27,  // 107: ssn.dataservice.v1.PredictionConfidences.ocr_line_se_payment_id:type_name -> google.protobuf.FloatValue
	27,  // 108: ssn.dataservice.v1.PredictionConfidences.ocr_line_se_bankgiro_creditor_id:type_name -> google.protobuf.FloatValue
	27,  // 109: ssn.dataservice.v1.PredictionConfidences.ocr_line_se_plusgiro_creditor_id:type_name -> google.protobuf.FloatValue
	27,  // 110: ssn.dataservice.v1.PredictionConfidences.ocr_line_no_payment_id:type_name -> google.protobuf.FloatValue
	27,  // 111: ssn.dataservice.v1.PredictionConfidences.ocr_line_fi_payment_id:type_name -> google.protobuf.FloatValue
	27,  // 112: ssn.dataservice.v1.PredictionConfidences.ocr_line_nl_payment_id:type_name -> google.protobuf.FloatValue
	27,  // 113: ssn.dataservice.v1.PredictionConfidences.supplier_corporate_id:type_name -> google.protobuf.FloatValue
	27,  // 114: ssn.dataservice.v1.PredictionConfidences.supplier_country_code:type_name -> google.protobuf.FloatValue
	27,  // 115: ssn.dataservice.v1.PredictionConfidences.invoice_number:type_name -> google.protobuf.FloatValue
	27,  // 116: ssn.dataservice.v1.PredictionConfidences.iban:type_name -> google.protobuf.FloatValue
	27,  // 117: ssn.dataservice.v1.PredictionConfidences.order_reference:type_name -> google.protobuf.FloatValue
	27,  // 118: ssn.dataservice.v1.PredictionConfidences.bank_account_number:type_name -> google.protobuf.FloatValue
	27,  // 119: ssn.dataservice.v1.PredictionConfidences.bank_registration_number:type_name -> google.protobuf.FloatValue
	27,  // 120: ssn.dataservice.v1.PredictionConfidences.supplier_name:type_name -> google.protobuf.FloatValue
	27,  // 121: ssn.dataservice.v1.PredictionConfidences.bic:type_name -> google.protobuf.FloatValue
	27,  // 122: ssn.dataservice.v1.PredictionConfidences.document_number:type_name -> google.protobuf.FloatValue
	27,  // 123: ssn.dataservice.v1.PredictionConfidences.document_date:type_name -> google.protobuf.FloatValue
	27,  // 124: ssn.dataservice.v1.PredictionConfidences.order_number:type_name -> google.protobuf.FloatValue
	27,  // 125: ssn.dataservice.v1.PredictionConfidences.supplier_vat_number:type_name -> google.protobuf.FloatValue
	27,  // 126: ssn.dataservice.v1.PredictionConfidences.supplier_organisation_number:type_name -> google.protobuf.FloatValue
	27,  // 127: ssn.dataservice.v1.PredictionConfidences.supplier_address:type_name -> google.protobuf.FloatValue
	27,  // 128: ssn.dataservice.v1.PredictionConfidences.customer_number:type_name -> google.protobuf.FloatValue
	27,  // 129: ssn.dataservice.v1.PredictionConfidences.receiver_order_number:type_name -> google.protobuf.FloatValue
	27,  // 130: ssn.dataservice.v1.PredictionConfidences.ocr_line_be_payment_id:type_name -> google.protobuf.FloatValue
	27,  // 131: ssn.dataservice.v1.PredictionConfidences.receiver_address:type_name -> google.protobuf.FloatValue
	27,  // 132: ssn.dataservice.v1.PredictionConfidences.receiver_country_code:type_name -> google.protobuf.FloatValue
	27,  // 133: ssn.dataservice.v1.PredictionConfidences.receiver_name:type_name -> google.protobuf.FloatValue
	27,  // 134: ssn.dataservice.v1.PredictionConfidences.receiver_vat_number:type_name -> google.protobuf.FloatValue
	27,  // 135: ssn.dataservice.v1.PredictionConfidences.check_in_date:type_name -> google.protobuf.FloatValue
	27,  // 136: ssn.dataservice.v1.PredictionConfidences.check_out_date:type_name -> google.protobuf.FloatValue
	28,  // 137: ssn.dataservice.v1.PredictionMetadata.total_incl_vat:type_name -> ssn.type.ModelSpec
	28,  // 138: ssn.dataservice.v1.PredictionMetadata.total_vat:type_name -> ssn.type.ModelSpec
	28,  // 139: ssn.dataservice.v1.PredictionMetadata.total_excl_vat:type_name -> ssn.type.ModelSpec
	28,  // 140: ssn.dataservice.v1.PredictionMetadata.order_date:type_name -> ssn.type.ModelSpec
	28,  // 141: ssn.dataservice.v1.PredictionMetadata.payment_due_date:type_name -> ssn.type.ModelSpec
	28,  // 142: ssn.dataservice.v1.PredictionMetadata.document_type:type_name -> ssn.type.ModelSpec
	28,  // 143: ssn.dataservice.v1.PredictionMetadata.currency:type_name -> ssn.type.ModelSpec
	28,  // 144: ssn.dataservice.v1.PredictionMetadata.credit_card_last_four:type_name -> ssn.type.ModelSpec
	28,  // 145: ssn.dataservice.v1.PredictionMetadata.payment_method:type_name -> ssn.type.ModelSpec
	28,  // 146: ssn.dataservice.v1.PredictionMetadata.ocr_line_dk_type:type_name -> ssn.type.ModelSpec
	28,  // 147: ssn.dataservice.v1.PredictionMetadata.ocr_line_dk_payment_id:type_name -> ssn.type.ModelSpec
	28,  // 148: ssn.dataservice.v1.PredictionMetadata.ocr_line_dk_creditor_id:type_name -> ssn.type.ModelSpec
	28,  // 149: ssn.dataservice.v1.PredictionMetadata.ocr_line_se_payment_id:type_name -> ssn.type.ModelSpec
	28,  // 150: ssn.dataservice.v1.PredictionMetadata.ocr_line_se_bankgiro_creditor_id:type_name -> ssn.type.ModelSpec
	28,  // 151: ssn.dataservice.v1.PredictionMetadata.ocr_line_se_plusgiro_creditor_id:type_name -> ssn.type.ModelSpec
	28,  // 152: ssn.dataservice.v1.PredictionMetadata.ocr_line_no_payment_id:type_name -> ssn.type.ModelSpec
	28,  // 153: ssn.dataservice.v1.PredictionMetadata.ocr_line_fi_payment_id:type_name -> ssn.type.ModelSpec
	28,  // 154: ssn.dataservice.v1.PredictionMetadata.ocr_line_nl_payment_id:type_name -> ssn.type.ModelSpec
	28,  // 155: ssn.dataservice.v1.PredictionMetadata.supplier_corporate_id:type_name -> ssn.type.ModelSpec
	28,  // 156: ssn.dataservice.v1.PredictionMetadata.supplier_country_code:type_name -> ssn.type.ModelSpec
	28,  // 157: ssn.dataservice.v1.PredictionMetadata.invoice_number:type_name -> ssn.type.ModelSpec
	28,  // 158: ssn.dataservice.v1.PredictionMetadata.iban:type_name -> ssn.type.ModelSpec
	28,  // 159: ssn.dataservice.v1.PredictionMetadata.order_reference:type_name -> ssn.type.ModelSpec
	28,  // 160: ssn.dataservice.v1.PredictionMetadata.bank_account_number:type_name -> ssn.type.ModelSpec
	28,  // 161: ssn.dataservice.v1.PredictionMetadata.bank_registration_number:type_name -> ssn.type.ModelSpec
	28,  // 162: ssn.dataservice.v1.PredictionMetadata.supplier_name:type_name -> ssn.type.ModelSpec
	28,  // 163: ssn.dataservice.v1.PredictionMetadata.bic:type_name -> ssn.type.ModelSpec
	28,  // 164: ssn.dataservice.v1.PredictionMetadata.document_number:type_name -> ssn.type.ModelSpec
	28,  // 165: ssn.dataservice.v1.PredictionMetadata.document_date:type_name -> ssn.type.ModelSpec
	28,  // 166: ssn.dataservice.v1.PredictionMetadata.order_number:type_name -> ssn.type.ModelSpec
	28,  // 167: ssn.dataservice.v1.PredictionMetadata.supplier_vat_number:type_name -> ssn.type.ModelSpec
	28,  // 168: ssn.dataservice.v1.PredictionMetadata.supplier_organisation_number:type_name -> ssn.type.ModelSpec
	28,  // 169: ssn.dataservice.v1.PredictionMetadata.supplier_address:type_name -> ssn.type.ModelSpec
	28,  // 170: ssn.dataservice.v1.PredictionMetadata.customer_number:type_name -> ssn.type.ModelSpec
	28,  // 171: ssn.dataservice.v1.PredictionMetadata.receiver_order_number:type_name -> ssn.type.ModelSpec
	28,  // 172: ssn.dataservice.v1.PredictionMetadata.ocr_line_be_payment_id:type_name -> ssn.type.ModelSpec
	28,  // 173: ssn.dataservice.v1.PredictionMetadata.receiver_address:type_name -> ssn.type.ModelSpec
	28,  // 174: ssn.dataservice.v1.PredictionMetadata.receiver_country_code:type_name -> ssn.type.ModelSpec
	28,  // 175: ssn.dataservice.v1.PredictionMetadata.receiver_name:type_name -> ssn.type.ModelSpec
	28,  // 176: ssn.dataservice.v1.PredictionMetadata.receiver_vat_number:type_name -> ssn.type.ModelSpec
	28,  // 177: ssn.dataservice.v1.PredictionMetadata.check_in_date:type_name -> ssn.type.ModelSpec
	28,  // 178: ssn.dataservice.v1.PredictionMetadata.check_out_date:type_name -> ssn.type.ModelSpec
	0,   // 179: ssn.dataservice.v1.CreateDocumentRequest.document:type_name -> ssn.dataservice.v1.Document
	0,   // 180: ssn.dataservice.v1.ReadDocumentResponse.document:type_name -> ssn.dataservice.v1.Document
	20,  // 181: ssn.dataservice.v1.PrepareFeedbackRequest.ta:type_name -> ssn.type.TextAnnotation
	2,   // 182: ssn.dataservice.v1.PrepareFeedbackRequest.predictions:type_name -> ssn.dataservice.v1.PredictionValues
	3,   // 183: ssn.dataservice.v1.PrepareFeedbackRequest.confidences:type_name -> ssn.dataservice.v1.PredictionConfidences
	4,   // 184: ssn.dataservice.v1.PrepareFeedbackRequest.prediction_metadata:type_name -> ssn.dataservice.v1.PredictionMetadata
	29,  // 185: ssn.dataservice.v1.PrepareFeedbackRequest.tier:type_name -> ssn.type.Tier
	1,   // 186: ssn.dataservice.v1.FeedbackRequest.true_values:type_name -> ssn.dataservice.v1.TrueValues
	15,  // 187: ssn.dataservice.v1.SsnMetrics.overall_correctness:type_name -> ssn.dataservice.v1.Correctness
	15,  // 188: ssn.dataservice.v1.SsnMetrics.field_correctness:type_name -> ssn.dataservice.v1.Correctness
	14,  // 189: ssn.dataservice.v1.SsnMetrics.differences:type_name -> ssn.dataservice.v1.FieldsComparison
	17,  // 190: ssn.dataservice.v1.CallsPerMonthResponse.calls_per_month:type_name -> ssn.dataservice.v1.CallsPerMonth
	15,  // 191: ssn.dataservice.v1.DeprecatedFeedbackMetrics.overall_correctness:type_name -> ssn.dataservice.v1.Correctness
	15,  // 192: ssn.dataservice.v1.DeprecatedFeedbackMetrics.field_correctness:type_name -> ssn.dataservice.v1.Correctness
	5,   // 193: ssn.dataservice.v1.DataService.CreateDocument:input_type -> ssn.dataservice.v1.CreateDocumentRequest
	7,   // 194: ssn.dataservice.v1.DataService.ReadDocument:input_type -> ssn.dataservice.v1.ReadDocumentRequest
	9,   // 195: ssn.dataservice.v1.DataService.PrepareFeedback:input_type -> ssn.dataservice.v1.PrepareFeedbackRequest
	10,  // 196: ssn.dataservice.v1.DataService.Feedback:input_type -> ssn.dataservice.v1.FeedbackRequest
	11,  // 197: ssn.dataservice.v1.DataService.CalculateMetrics:input_type -> ssn.dataservice.v1.FeedbackMetricsRequest
	12,  // 198: ssn.dataservice.v1.DataService.CalculateAnnotationProcessMetrics:input_type -> ssn.dataservice.v1.PredictionMetricsRequest
	16,  // 199: ssn.dataservice.v1.DataService.Delete:input_type -> ssn.dataservice.v1.DeleteRequest
	30,  // 200: ssn.dataservice.v1.DataService.CallsPerMonthMetric:input_type -> google.protobuf.Empty
	6,   // 201: ssn.dataservice.v1.DataService.CreateDocument:output_type -> ssn.dataservice.v1.CreateDocumentResponse
	8,   // 202: ssn.dataservice.v1.DataService.ReadDocument:output_type -> ssn.dataservice.v1.ReadDocumentResponse
	30,  // 203: ssn.dataservice.v1.DataService.PrepareFeedback:output_type -> google.protobuf.Empty
	30,  // 204: ssn.dataservice.v1.DataService.Feedback:output_type -> google.protobuf.Empty
	19,  // 205: ssn.dataservice.v1.DataService.CalculateMetrics:output_type -> ssn.dataservice.v1.DeprecatedFeedbackMetrics
	13,  // 206: ssn.dataservice.v1.DataService.CalculateAnnotationProcessMetrics:output_type -> ssn.dataservice.v1.SsnMetrics
	30,  // 207: ssn.dataservice.v1.DataService.Delete:output_type -> google.protobuf.Empty
	18,  // 208: ssn.dataservice.v1.DataService.CallsPerMonthMetric:output_type -> ssn.dataservice.v1.CallsPerMonthResponse
	201, // [201:209] is the sub-list for method output_type
	193, // [193:201] is the sub-list for method input_type
	193, // [193:193] is the sub-list for extension type_name
	193, // [193:193] is the sub-list for extension extendee
	0,   // [0:193] is the sub-list for field type_name
}

func init() { file_ssn_dataservice_v1_dataservice_proto_init() }
func file_ssn_dataservice_v1_dataservice_proto_init() {
	if File_ssn_dataservice_v1_dataservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ssn_dataservice_v1_dataservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_dataservice_v1_dataservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrueValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_dataservice_v1_dataservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictionValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_dataservice_v1_dataservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictionConfidences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_dataservice_v1_dataservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_dataservice_v1_dataservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_dataservice_v1_dataservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_dataservice_v1_dataservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_dataservice_v1_dataservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_dataservice_v1_dataservice_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_dataservice_v1_dataservice_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_dataservice_v1_dataservice_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedbackMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_dataservice_v1_dataservice_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictionMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_dataservice_v1_dataservice_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsnMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_dataservice_v1_dataservice_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldsComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_dataservice_v1_dataservice_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Correctness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_dataservice_v1_dataservice_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_dataservice_v1_dataservice_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallsPerMonth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_dataservice_v1_dataservice_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallsPerMonthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_dataservice_v1_dataservice_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeprecatedFeedbackMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ssn_dataservice_v1_dataservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ssn_dataservice_v1_dataservice_proto_goTypes,
		DependencyIndexes: file_ssn_dataservice_v1_dataservice_proto_depIdxs,
		MessageInfos:      file_ssn_dataservice_v1_dataservice_proto_msgTypes,
	}.Build()
	File_ssn_dataservice_v1_dataservice_proto = out.File
	file_ssn_dataservice_v1_dataservice_proto_rawDesc = nil
	file_ssn_dataservice_v1_dataservice_proto_goTypes = nil
	file_ssn_dataservice_v1_dataservice_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: ssn/type/swiss_qr_bill.proto

package ssntype

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SwissQrBill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payment         *SwissQrPayment `protobuf:"bytes,1,opt,name=payment,proto3" json:"payment,omitempty"`
	IsValid         bool            `protobuf:"varint,2,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	ValidationError string          `protobuf:"bytes,3,opt,name=validation_error,json=validationError,proto3" json:"validation_error,omitempty"`
}

func (x *SwissQrBill) Reset() {
	*x = SwissQrBill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_type_swiss_qr_bill_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwissQrBill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwissQrBill) ProtoMessage() {}

func (x *SwissQrBill) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_type_swiss_qr_bill_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwissQrBill.ProtoReflect.Descriptor instead.
func (*SwissQrBill) Descriptor() ([]byte, []int) {
	return file_ssn_type_swiss_qr_bill_proto_rawDescGZIP(), []int{0}
}

func (x *SwissQrBill) GetPayment() *SwissQrPayment {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *SwissQrBill) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *SwissQrBill) GetValidationError() string {
	if x != nil {
		return x.ValidationError
	}
	return ""
}

type SwissQrPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header (0-2)
	QrType     string `protobuf:"bytes,1,opt,name=qr_type,json=qrType,proto3" json:"qr_type,omitempty"`             // Field 1 (pos 0)
	Version    string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                         // Field 2 (pos 1)
	CodingType string `protobuf:"bytes,3,opt,name=coding_type,json=codingType,proto3" json:"coding_type,omitempty"` // Field 3 (pos 2)
	// Account (3)
	Account string `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"` // Field 4 (pos 3)
	// Creditor (4-10)
	CreditorAddressType string `protobuf:"bytes,5,opt,name=creditor_address_type,json=creditorAddressType,proto3" json:"creditor_address_type,omitempty"` // Field 5 (pos 4) - "S" or "K"
	CreditorName        string `protobuf:"bytes,6,opt,name=creditor_name,json=creditorName,proto3" json:"creditor_name,omitempty"`                        // Field 6 (pos 5)
	CreditorField_1     string `protobuf:"bytes,7,opt,name=creditor_field_1,json=creditorField1,proto3" json:"creditor_field_1,omitempty"`                // Field 7 (pos 6) - Street OR Address Line 1
	CreditorField_2     string `protobuf:"bytes,8,opt,name=creditor_field_2,json=creditorField2,proto3" json:"creditor_field_2,omitempty"`                // Field 8 (pos 7) - Building Number OR Address Line 2
	CreditorField_3     string `protobuf:"bytes,9,opt,name=creditor_field_3,json=creditorField3,proto3" json:"creditor_field_3,omitempty"`                // Field 9 (pos 8) - Postal Code OR empty
	CreditorField_4     string `protobuf:"bytes,10,opt,name=creditor_field_4,json=creditorField4,proto3" json:"creditor_field_4,omitempty"`               // Field 10 (pos 9) - City OR empty
	CreditorCountry     string `protobuf:"bytes,11,opt,name=creditor_country,json=creditorCountry,proto3" json:"creditor_country,omitempty"`              // Field 11 (pos 10)
	// Ultimate Creditor (11-17)
	UltimateCreditorAddressType string `protobuf:"bytes,12,opt,name=ultimate_creditor_address_type,json=ultimateCreditorAddressType,proto3" json:"ultimate_creditor_address_type,omitempty"` // Field 12 (pos 11) - "S" or "K"
	UltimateCreditorName        string `protobuf:"bytes,13,opt,name=ultimate_creditor_name,json=ultimateCreditorName,proto3" json:"ultimate_creditor_name,omitempty"`                        // Field 13 (pos 12)
	UltimateCreditorField_1     string `protobuf:"bytes,14,opt,name=ultimate_creditor_field_1,json=ultimateCreditorField1,proto3" json:"ultimate_creditor_field_1,omitempty"`                // Field 14 (pos 13)
	UltimateCreditorField_2     string `protobuf:"bytes,15,opt,name=ultimate_creditor_field_2,json=ultimateCreditorField2,proto3" json:"ultimate_creditor_field_2,omitempty"`                // Field 15 (pos 14)
	UltimateCreditorField_3     string `protobuf:"bytes,16,opt,name=ultimate_creditor_field_3,json=ultimateCreditorField3,proto3" json:"ultimate_creditor_field_3,omitempty"`                // Field 16 (pos 15)
	UltimateCreditorField_4     string `protobuf:"bytes,17,opt,name=ultimate_creditor_field_4,json=ultimateCreditorField4,proto3" json:"ultimate_creditor_field_4,omitempty"`                // Field 17 (pos 16)
	UltimateCreditorCountry     string `protobuf:"bytes,18,opt,name=ultimate_creditor_country,json=ultimateCreditorCountry,proto3" json:"ultimate_creditor_country,omitempty"`               // Field 18 (pos 17)
	// Payment Information (18-19)
	Amount   string `protobuf:"bytes,19,opt,name=amount,proto3" json:"amount,omitempty"`     // Field 19 (pos 18)
	Currency string `protobuf:"bytes,20,opt,name=currency,proto3" json:"currency,omitempty"` // Field 20 (pos 19)
	// Ultimate Debtor (20-26)
	UltimateDebtorAddressType string `protobuf:"bytes,21,opt,name=ultimate_debtor_address_type,json=ultimateDebtorAddressType,proto3" json:"ultimate_debtor_address_type,omitempty"` // Field 21 (pos 20) - "S" or "K"
	UltimateDebtorName        string `protobuf:"bytes,22,opt,name=ultimate_debtor_name,json=ultimateDebtorName,proto3" json:"ultimate_debtor_name,omitempty"`                        // Field 22 (pos 21)
	UltimateDebtorField_1     string `protobuf:"bytes,23,opt,name=ultimate_debtor_field_1,json=ultimateDebtorField1,proto3" json:"ultimate_debtor_field_1,omitempty"`                // Field 23 (pos 22)
	UltimateDebtorField_2     string `protobuf:"bytes,24,opt,name=ultimate_debtor_field_2,json=ultimateDebtorField2,proto3" json:"ultimate_debtor_field_2,omitempty"`                // Field 24 (pos 23)
	UltimateDebtorField_3     string `protobuf:"bytes,25,opt,name=ultimate_debtor_field_3,json=ultimateDebtorField3,proto3" json:"ultimate_debtor_field_3,omitempty"`                // Field 25 (pos 24)
	UltimateDebtorField_4     string `protobuf:"bytes,26,opt,name=ultimate_debtor_field_4,json=ultimateDebtorField4,proto3" json:"ultimate_debtor_field_4,omitempty"`                // Field 26 (pos 25)
	UltimateDebtorCountry     string `protobuf:"bytes,27,opt,name=ultimate_debtor_country,json=ultimateDebtorCountry,proto3" json:"ultimate_debtor_country,omitempty"`               // Field 27 (pos 26)
	// Reference Information (27-28)
	PaymentReferenceType string `protobuf:"bytes,28,opt,name=payment_reference_type,json=paymentReferenceType,proto3" json:"payment_reference_type,omitempty"` // Field 28 (pos 27)
	PaymentReference     string `protobuf:"bytes,29,opt,name=payment_reference,json=paymentReference,proto3" json:"payment_reference,omitempty"`               // Field 29 (pos 28)
	// Additional Information (29-30)
	UnstructuredMessage string `protobuf:"bytes,30,opt,name=unstructured_message,json=unstructuredMessage,proto3" json:"unstructured_message,omitempty"` // Field 30 (pos 29)
	BillInformation     string `protobuf:"bytes,31,opt,name=bill_information,json=billInformation,proto3" json:"bill_information,omitempty"`             // Field 31 (pos 30)
	// Trailer (31)
	Trailer string `protobuf:"bytes,32,opt,name=trailer,proto3" json:"trailer,omitempty"` // Field 32 (pos 31) - "EPD"
}

func (x *SwissQrPayment) Reset() {
	*x = SwissQrPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_type_swiss_qr_bill_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwissQrPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwissQrPayment) ProtoMessage() {}

func (x *SwissQrPayment) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_type_swiss_qr_bill_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwissQrPayment.ProtoReflect.Descriptor instead.
func (*SwissQrPayment) Descriptor() ([]byte, []int) {
	return file_ssn_type_swiss_qr_bill_proto_rawDescGZIP(), []int{1}
}

func (x *SwissQrPayment) GetQrType() string {
	if x != nil {
		return x.QrType
	}
	return ""
}

func (x *SwissQrPayment) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SwissQrPayment) GetCodingType() string {
	if x != nil {
		return x.CodingType
	}
	return ""
}

func (x *SwissQrPayment) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *SwissQrPayment) GetCreditorAddressType() string {
	if x != nil {
		return x.CreditorAddressType
	}
	return ""
}

func (x *SwissQrPayment) GetCreditorName() string {
	if x != nil {
		return x.CreditorName
	}
	return ""
}

func (x *SwissQrPayment) GetCreditorField_1() string {
	if x != nil {
		return x.CreditorField_1
	}
	return ""
}

func (x *SwissQrPayment) GetCreditorField_2() string {
	if x != nil {
		return x.CreditorField_2
	}
	return ""
}

func (x *SwissQrPayment) GetCreditorField_3() string {
	if x != nil {
		return x.CreditorField_3
	}
	return ""
}

func (x *SwissQrPayment) GetCreditorField_4() string {
	if x != nil {
		return x.CreditorField_4
	}
	return ""
}

func (x *SwissQrPayment) GetCreditorCountry() string {
	if x != nil {
		return x.CreditorCountry
	}
	return ""
}

func (x *SwissQrPayment) GetUltimateCreditorAddressType() string {
	if x != nil {
		return x.UltimateCreditorAddressType
	}
	return ""
}

func (x *SwissQrPayment) GetUltimateCreditorName() string {
	if x != nil {
		return x.UltimateCreditorName
	}
	return ""
}

func (x *SwissQrPayment) GetUltimateCreditorField_1() string {
	if x != nil {
		return x.UltimateCreditorField_1
	}
	return ""
}

func (x *SwissQrPayment) GetUltimateCreditorField_2() string {
	if x != nil {
		return x.UltimateCreditorField_2
	}
	return ""
}

func (x *SwissQrPayment) GetUltimateCreditorField_3() string {
	if x != nil {
		return x.UltimateCreditorField_3
	}
	return ""
}

func (x *SwissQrPayment) GetUltimateCreditorField_4() string {
	if x != nil {
		return x.UltimateCreditorField_4
	}
	return ""
}

func (x *SwissQrPayment) GetUltimateCreditorCountry() string {
	if x != nil {
		return x.UltimateCreditorCountry
	}
	return ""
}

func (x *SwissQrPayment) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *SwissQrPayment) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *SwissQrPayment) GetUltimateDebtorAddressType() string {
	if x != nil {
		return x.UltimateDebtorAddressType
	}
	return ""
}

func (x *SwissQrPayment) GetUltimateDebtorName() string {
	if x != nil {
		return x.UltimateDebtorName
	}
	return ""
}

func (x *SwissQrPayment) GetUltimateDebtorField_1() string {
	if x != nil {
		return x.UltimateDebtorField_1
	}
	return ""
}

func (x *SwissQrPayment) GetUltimateDebtorField_2() string {
	if x != nil {
		return x.UltimateDebtorField_2
	}
	return ""
}

func (x *SwissQrPayment) GetUltimateDebtorField_3() string {
	if x != nil {
		return x.UltimateDebtorField_3
	}
	return ""
}

func (x *SwissQrPayment) GetUltimateDebtorField_4() string {
	if x != nil {
		return x.UltimateDebtorField_4
	}
	return ""
}

func (x *SwissQrPayment) GetUltimateDebtorCountry() string {
	if x != nil {
		return x.UltimateDebtorCountry
	}
	return ""
}

func (x *SwissQrPayment) GetPaymentReferenceType() string {
	if x != nil {
		return x.PaymentReferenceType
	}
	return ""
}

func (x *SwissQrPayment) GetPaymentReference() string {
	if x != nil {
		return x.PaymentReference
	}
	return ""
}

func (x *SwissQrPayment) GetUnstructuredMessage() string {
	if x != nil {
		return x.UnstructuredMessage
	}
	return ""
}

func (x *SwissQrPayment) GetBillInformation() string {
	if x != nil {
		return x.BillInformation
	}
	return ""
}

func (x *SwissQrPayment) GetTrailer() string {
	if x != nil {
		return x.Trailer
	}
	return ""
}

var File_ssn_type_swiss_qr_bill_proto protoreflect.FileDescriptor

var file_ssn_type_swiss_qr_bill_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x73, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x73, 0x77, 0x69, 0x73, 0x73,
	0x5f, 0x71, 0x72, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x0b, 0x53, 0x77, 0x69,
	0x73, 0x73, 0x51, 0x72, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x32, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x73, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x77, 0x69, 0x73, 0x73, 0x51, 0x72, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xe3, 0x0b, 0x0a, 0x0e, 0x53, 0x77, 0x69, 0x73, 0x73, 0x51, 0x72, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x31,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x32,
	0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x33, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x34, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x34, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x43, 0x0a, 0x1e, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x39, 0x0a, 0x19, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x32,
	0x12, 0x39, 0x0a, 0x19, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x33, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x12, 0x39, 0x0a, 0x19, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x34, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x34, 0x12, 0x3a, 0x0a, 0x19, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x1c, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x62, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x31, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x31,
	0x12, 0x35, 0x0a, 0x17, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x62,
	0x74, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x74, 0x6f,
	0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x12, 0x35, 0x0a, 0x17, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x33, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x12, 0x35,
	0x0a, 0x17, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x6f,
	0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x34, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x34, 0x12, 0x36, 0x0a, 0x17, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x34, 0x0a,
	0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x31, 0x0a, 0x14, 0x75, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x75, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62,
	0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x42, 0x9c, 0x01, 0x0a, 0x11, 0x61, 0x69, 0x2e,
	0x76, 0x69, 0x73, 0x6d, 0x61, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10,
	0x53, 0x77, 0x69, 0x73, 0x73, 0x51, 0x72, 0x42, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65,
	0x2d, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x2f, 0x76, 0x6d, 0x6c, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x73, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x3b, 0x73, 0x73, 0x6e, 0x74, 0x79, 0x70, 0x65, 0xa2, 0x02, 0x03, 0x53, 0x54, 0x58, 0xaa, 0x02,
	0x08, 0x53, 0x73, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0xca, 0x02, 0x08, 0x53, 0x73, 0x6e, 0x5c,
	0x54, 0x79, 0x70, 0x65, 0xe2, 0x02, 0x14, 0x53, 0x73, 0x6e, 0x5c, 0x54, 0x79, 0x70, 0x65, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x53, 0x73,
	0x6e, 0x3a, 0x3a, 0x54, 0x79, 0x70, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ssn_type_swiss_qr_bill_proto_rawDescOnce sync.Once
	file_ssn_type_swiss_qr_bill_proto_rawDescData = file_ssn_type_swiss_qr_bill_proto_rawDesc
)

func file_ssn_type_swiss_qr_bill_proto_rawDescGZIP() []byte {
	file_ssn_type_swiss_qr_bill_proto_rawDescOnce.Do(func() {
		file_ssn_type_swiss_qr_bill_proto_rawDescData = protoimpl.X.CompressGZIP(file_ssn_type_swiss_qr_bill_proto_rawDescData)
	})
	return file_ssn_type_swiss_qr_bill_proto_rawDescData
}

var file_ssn_type_swiss_qr_bill_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ssn_type_swiss_qr_bill_proto_goTypes = []interface{}{
	(*SwissQrBill)(nil),    // 0: ssn.type.SwissQrBill
	(*SwissQrPayment)(nil), // 1: ssn.type.SwissQrPayment
}
var file_ssn_type_swiss_qr_bill_proto_depIdxs = []int32{
	1, // 0: ssn.type.SwissQrBill.payment:type_name -> ssn.type.SwissQrPayment
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_ssn_type_swiss_qr_bill_proto_init() }
func file_ssn_type_swiss_qr_bill_proto_init() {
	if File_ssn_type_swiss_qr_bill_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ssn_type_swiss_qr_bill_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwissQrBill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_type_swiss_qr_bill_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwissQrPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ssn_type_swiss_qr_bill_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ssn_type_swiss_qr_bill_proto_goTypes,
		DependencyIndexes: file_ssn_type_swiss_qr_bill_proto_depIdxs,
		MessageInfos:      file_ssn_type_swiss_qr_bill_proto_msgTypes,
	}.Build()
	File_ssn_type_swiss_qr_bill_proto = out.File
	file_ssn_type_swiss_qr_bill_proto_rawDesc = nil
	file_ssn_type_swiss_qr_bill_proto_goTypes = nil
	file_ssn_type_swiss_qr_bill_proto_depIdxs = nil
}

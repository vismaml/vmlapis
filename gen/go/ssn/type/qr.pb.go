// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: ssn/type/qr.proto

package ssntype

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QrCodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *QrCodeData) Reset() {
	*x = QrCodeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_type_qr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QrCodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QrCodeData) ProtoMessage() {}

func (x *QrCodeData) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_type_qr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QrCodeData.ProtoReflect.Descriptor instead.
func (*QrCodeData) Descriptor() ([]byte, []int) {
	return file_ssn_type_qr_proto_rawDescGZIP(), []int{0}
}

func (x *QrCodeData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type SwissQrBill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QrType                            string `protobuf:"bytes,1,opt,name=qr_type,json=qrType,proto3" json:"qr_type,omitempty"`
	Version                           string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	CodingType                        string `protobuf:"bytes,3,opt,name=coding_type,json=codingType,proto3" json:"coding_type,omitempty"`
	Account                           string `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	CreditorAddressType               string `protobuf:"bytes,5,opt,name=creditor_address_type,json=creditorAddressType,proto3" json:"creditor_address_type,omitempty"`
	CreditorName                      string `protobuf:"bytes,6,opt,name=creditor_name,json=creditorName,proto3" json:"creditor_name,omitempty"`
	CreditorAddressLine_1             string `protobuf:"bytes,7,opt,name=creditor_address_line_1,json=creditorAddressLine1,proto3" json:"creditor_address_line_1,omitempty"`
	CreditorAddressLine_2             string `protobuf:"bytes,8,opt,name=creditor_address_line_2,json=creditorAddressLine2,proto3" json:"creditor_address_line_2,omitempty"`
	CreditorAddressPostalCode         string `protobuf:"bytes,9,opt,name=creditor_address_postal_code,json=creditorAddressPostalCode,proto3" json:"creditor_address_postal_code,omitempty"`
	CreditorAddressCity               string `protobuf:"bytes,10,opt,name=creditor_address_city,json=creditorAddressCity,proto3" json:"creditor_address_city,omitempty"`
	CreditorAddressCountry            string `protobuf:"bytes,11,opt,name=creditor_address_country,json=creditorAddressCountry,proto3" json:"creditor_address_country,omitempty"`
	UltimateCreditorAddressType       string `protobuf:"bytes,12,opt,name=ultimate_creditor_address_type,json=ultimateCreditorAddressType,proto3" json:"ultimate_creditor_address_type,omitempty"`
	UltimateCreditorName              string `protobuf:"bytes,13,opt,name=ultimate_creditor_name,json=ultimateCreditorName,proto3" json:"ultimate_creditor_name,omitempty"`
	UltimateCreditorAddressLine_1     string `protobuf:"bytes,14,opt,name=ultimate_creditor_address_line_1,json=ultimateCreditorAddressLine1,proto3" json:"ultimate_creditor_address_line_1,omitempty"`
	UltimateCreditorAddressLine_2     string `protobuf:"bytes,15,opt,name=ultimate_creditor_address_line_2,json=ultimateCreditorAddressLine2,proto3" json:"ultimate_creditor_address_line_2,omitempty"`
	UltimateCreditorAddressPostalCode string `protobuf:"bytes,16,opt,name=ultimate_creditor_address_postal_code,json=ultimateCreditorAddressPostalCode,proto3" json:"ultimate_creditor_address_postal_code,omitempty"`
	UltimateCreditorAddressCity       string `protobuf:"bytes,17,opt,name=ultimate_creditor_address_city,json=ultimateCreditorAddressCity,proto3" json:"ultimate_creditor_address_city,omitempty"`
	UltimateCreditorAddressCountry    string `protobuf:"bytes,18,opt,name=ultimate_creditor_address_country,json=ultimateCreditorAddressCountry,proto3" json:"ultimate_creditor_address_country,omitempty"`
	Amount                            string `protobuf:"bytes,19,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency                          string `protobuf:"bytes,20,opt,name=currency,proto3" json:"currency,omitempty"`
	UltimateDebtorAddressType         string `protobuf:"bytes,21,opt,name=ultimate_debtor_address_type,json=ultimateDebtorAddressType,proto3" json:"ultimate_debtor_address_type,omitempty"`
	UltimateDebtorName                string `protobuf:"bytes,22,opt,name=ultimate_debtor_name,json=ultimateDebtorName,proto3" json:"ultimate_debtor_name,omitempty"`
	UltimateDebtorAddressLine_1       string `protobuf:"bytes,23,opt,name=ultimate_debtor_address_line_1,json=ultimateDebtorAddressLine1,proto3" json:"ultimate_debtor_address_line_1,omitempty"`
	UltimateDebtorAddressLine_2       string `protobuf:"bytes,24,opt,name=ultimate_debtor_address_line_2,json=ultimateDebtorAddressLine2,proto3" json:"ultimate_debtor_address_line_2,omitempty"`
	UltimateDebtorAddressPostalCode   string `protobuf:"bytes,25,opt,name=ultimate_debtor_address_postal_code,json=ultimateDebtorAddressPostalCode,proto3" json:"ultimate_debtor_address_postal_code,omitempty"`
	UltimateDebtorAddressCity         string `protobuf:"bytes,26,opt,name=ultimate_debtor_address_city,json=ultimateDebtorAddressCity,proto3" json:"ultimate_debtor_address_city,omitempty"`
	UltimateDebtorAddressCountry      string `protobuf:"bytes,27,opt,name=ultimate_debtor_address_country,json=ultimateDebtorAddressCountry,proto3" json:"ultimate_debtor_address_country,omitempty"`
	PaymentReferenceType              string `protobuf:"bytes,28,opt,name=payment_reference_type,json=paymentReferenceType,proto3" json:"payment_reference_type,omitempty"`
	PaymentReference                  string `protobuf:"bytes,29,opt,name=payment_reference,json=paymentReference,proto3" json:"payment_reference,omitempty"`
	UnstructuredMessage               string `protobuf:"bytes,30,opt,name=unstructured_message,json=unstructuredMessage,proto3" json:"unstructured_message,omitempty"`
	Trailer                           string `protobuf:"bytes,31,opt,name=trailer,proto3" json:"trailer,omitempty"`
	BillingInformation                string `protobuf:"bytes,32,opt,name=billing_information,json=billingInformation,proto3" json:"billing_information,omitempty"`
	Av1Parameters                     string `protobuf:"bytes,33,opt,name=av1_parameters,json=av1Parameters,proto3" json:"av1_parameters,omitempty"`
	Av2Parameters                     string `protobuf:"bytes,34,opt,name=av2_parameters,json=av2Parameters,proto3" json:"av2_parameters,omitempty"`
}

func (x *SwissQrBill) Reset() {
	*x = SwissQrBill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssn_type_qr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwissQrBill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwissQrBill) ProtoMessage() {}

func (x *SwissQrBill) ProtoReflect() protoreflect.Message {
	mi := &file_ssn_type_qr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwissQrBill.ProtoReflect.Descriptor instead.
func (*SwissQrBill) Descriptor() ([]byte, []int) {
	return file_ssn_type_qr_proto_rawDescGZIP(), []int{1}
}

func (x *SwissQrBill) GetQrType() string {
	if x != nil {
		return x.QrType
	}
	return ""
}

func (x *SwissQrBill) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SwissQrBill) GetCodingType() string {
	if x != nil {
		return x.CodingType
	}
	return ""
}

func (x *SwissQrBill) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *SwissQrBill) GetCreditorAddressType() string {
	if x != nil {
		return x.CreditorAddressType
	}
	return ""
}

func (x *SwissQrBill) GetCreditorName() string {
	if x != nil {
		return x.CreditorName
	}
	return ""
}

func (x *SwissQrBill) GetCreditorAddressLine_1() string {
	if x != nil {
		return x.CreditorAddressLine_1
	}
	return ""
}

func (x *SwissQrBill) GetCreditorAddressLine_2() string {
	if x != nil {
		return x.CreditorAddressLine_2
	}
	return ""
}

func (x *SwissQrBill) GetCreditorAddressPostalCode() string {
	if x != nil {
		return x.CreditorAddressPostalCode
	}
	return ""
}

func (x *SwissQrBill) GetCreditorAddressCity() string {
	if x != nil {
		return x.CreditorAddressCity
	}
	return ""
}

func (x *SwissQrBill) GetCreditorAddressCountry() string {
	if x != nil {
		return x.CreditorAddressCountry
	}
	return ""
}

func (x *SwissQrBill) GetUltimateCreditorAddressType() string {
	if x != nil {
		return x.UltimateCreditorAddressType
	}
	return ""
}

func (x *SwissQrBill) GetUltimateCreditorName() string {
	if x != nil {
		return x.UltimateCreditorName
	}
	return ""
}

func (x *SwissQrBill) GetUltimateCreditorAddressLine_1() string {
	if x != nil {
		return x.UltimateCreditorAddressLine_1
	}
	return ""
}

func (x *SwissQrBill) GetUltimateCreditorAddressLine_2() string {
	if x != nil {
		return x.UltimateCreditorAddressLine_2
	}
	return ""
}

func (x *SwissQrBill) GetUltimateCreditorAddressPostalCode() string {
	if x != nil {
		return x.UltimateCreditorAddressPostalCode
	}
	return ""
}

func (x *SwissQrBill) GetUltimateCreditorAddressCity() string {
	if x != nil {
		return x.UltimateCreditorAddressCity
	}
	return ""
}

func (x *SwissQrBill) GetUltimateCreditorAddressCountry() string {
	if x != nil {
		return x.UltimateCreditorAddressCountry
	}
	return ""
}

func (x *SwissQrBill) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *SwissQrBill) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *SwissQrBill) GetUltimateDebtorAddressType() string {
	if x != nil {
		return x.UltimateDebtorAddressType
	}
	return ""
}

func (x *SwissQrBill) GetUltimateDebtorName() string {
	if x != nil {
		return x.UltimateDebtorName
	}
	return ""
}

func (x *SwissQrBill) GetUltimateDebtorAddressLine_1() string {
	if x != nil {
		return x.UltimateDebtorAddressLine_1
	}
	return ""
}

func (x *SwissQrBill) GetUltimateDebtorAddressLine_2() string {
	if x != nil {
		return x.UltimateDebtorAddressLine_2
	}
	return ""
}

func (x *SwissQrBill) GetUltimateDebtorAddressPostalCode() string {
	if x != nil {
		return x.UltimateDebtorAddressPostalCode
	}
	return ""
}

func (x *SwissQrBill) GetUltimateDebtorAddressCity() string {
	if x != nil {
		return x.UltimateDebtorAddressCity
	}
	return ""
}

func (x *SwissQrBill) GetUltimateDebtorAddressCountry() string {
	if x != nil {
		return x.UltimateDebtorAddressCountry
	}
	return ""
}

func (x *SwissQrBill) GetPaymentReferenceType() string {
	if x != nil {
		return x.PaymentReferenceType
	}
	return ""
}

func (x *SwissQrBill) GetPaymentReference() string {
	if x != nil {
		return x.PaymentReference
	}
	return ""
}

func (x *SwissQrBill) GetUnstructuredMessage() string {
	if x != nil {
		return x.UnstructuredMessage
	}
	return ""
}

func (x *SwissQrBill) GetTrailer() string {
	if x != nil {
		return x.Trailer
	}
	return ""
}

func (x *SwissQrBill) GetBillingInformation() string {
	if x != nil {
		return x.BillingInformation
	}
	return ""
}

func (x *SwissQrBill) GetAv1Parameters() string {
	if x != nil {
		return x.Av1Parameters
	}
	return ""
}

func (x *SwissQrBill) GetAv2Parameters() string {
	if x != nil {
		return x.Av2Parameters
	}
	return ""
}

var File_ssn_type_qr_proto protoreflect.FileDescriptor

var file_ssn_type_qr_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x73, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x71, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x22, 0x26, 0x0a,
	0x0a, 0x51, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x92, 0x0e, 0x0a, 0x0b, 0x53, 0x77, 0x69, 0x73, 0x73, 0x51,
	0x72, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x6e, 0x65, 0x31, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x32, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x32, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x69, 0x74, 0x79, 0x12,
	0x38, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x1e, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x31, 0x12, 0x46, 0x0a, 0x20,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x32,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x6e, 0x65, 0x32, 0x12, 0x50, 0x0a, 0x25, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x21, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x69, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x21, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x1c, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x74, 0x6f, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a,
	0x1e, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x6f, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x31, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x62, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65,
	0x31, 0x12, 0x42, 0x0a, 0x1e, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65,
	0x62, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x6e, 0x65, 0x32, 0x12, 0x4c, 0x0a, 0x23, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1f, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x74,
	0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x43, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x1f, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x31,
	0x0a, 0x14, 0x75, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x75, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x76, 0x31, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x76, 0x31, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x76, 0x32, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x76, 0x32,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x93, 0x01, 0x0a, 0x11, 0x61,
	0x69, 0x2e, 0x76, 0x69, 0x73, 0x6d, 0x61, 0x2e, 0x73, 0x73, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x07, 0x51, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69,
	0x63, 0x2f, 0x76, 0x6d, 0x6c, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f,
	0x2f, 0x73, 0x73, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x3b, 0x73, 0x73, 0x6e, 0x74, 0x79, 0x70,
	0x65, 0xa2, 0x02, 0x03, 0x53, 0x54, 0x58, 0xaa, 0x02, 0x08, 0x53, 0x73, 0x6e, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0xca, 0x02, 0x08, 0x53, 0x73, 0x6e, 0x5c, 0x54, 0x79, 0x70, 0x65, 0xe2, 0x02, 0x14,
	0x53, 0x73, 0x6e, 0x5c, 0x54, 0x79, 0x70, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x53, 0x73, 0x6e, 0x3a, 0x3a, 0x54, 0x79, 0x70, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ssn_type_qr_proto_rawDescOnce sync.Once
	file_ssn_type_qr_proto_rawDescData = file_ssn_type_qr_proto_rawDesc
)

func file_ssn_type_qr_proto_rawDescGZIP() []byte {
	file_ssn_type_qr_proto_rawDescOnce.Do(func() {
		file_ssn_type_qr_proto_rawDescData = protoimpl.X.CompressGZIP(file_ssn_type_qr_proto_rawDescData)
	})
	return file_ssn_type_qr_proto_rawDescData
}

var file_ssn_type_qr_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ssn_type_qr_proto_goTypes = []interface{}{
	(*QrCodeData)(nil),  // 0: ssn.type.QrCodeData
	(*SwissQrBill)(nil), // 1: ssn.type.SwissQrBill
}
var file_ssn_type_qr_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ssn_type_qr_proto_init() }
func file_ssn_type_qr_proto_init() {
	if File_ssn_type_qr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ssn_type_qr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QrCodeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssn_type_qr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwissQrBill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ssn_type_qr_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ssn_type_qr_proto_goTypes,
		DependencyIndexes: file_ssn_type_qr_proto_depIdxs,
		MessageInfos:      file_ssn_type_qr_proto_msgTypes,
	}.Build()
	File_ssn_type_qr_proto = out.File
	file_ssn_type_qr_proto_rawDesc = nil
	file_ssn_type_qr_proto_goTypes = nil
	file_ssn_type_qr_proto_depIdxs = nil
}

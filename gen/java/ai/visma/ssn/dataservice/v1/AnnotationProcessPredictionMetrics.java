// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ssn/dataservice/v1/dataservice.proto
// Protobuf Java Version: 4.29.3

package ai.visma.ssn.dataservice.v1;

/**
 * Protobuf type {@code ssn.dataservice.v1.AnnotationProcessPredictionMetrics}
 */
public final class AnnotationProcessPredictionMetrics extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:ssn.dataservice.v1.AnnotationProcessPredictionMetrics)
    AnnotationProcessPredictionMetricsOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      AnnotationProcessPredictionMetrics.class.getName());
  }
  // Use AnnotationProcessPredictionMetrics.newBuilder() to construct.
  private AnnotationProcessPredictionMetrics(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private AnnotationProcessPredictionMetrics() {
    overallCorrectness_ = java.util.Collections.emptyList();
    fieldCorrectness_ = java.util.Collections.emptyList();
    differences_ = java.util.Collections.emptyList();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return ai.visma.ssn.dataservice.v1.DataserviceProto.internal_static_ssn_dataservice_v1_AnnotationProcessPredictionMetrics_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return ai.visma.ssn.dataservice.v1.DataserviceProto.internal_static_ssn_dataservice_v1_AnnotationProcessPredictionMetrics_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics.class, ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics.Builder.class);
  }

  public static final int DOCUMENT_COUNT_FIELD_NUMBER = 1;
  private int documentCount_ = 0;
  /**
   * <code>int32 document_count = 1 [json_name = "documentCount"];</code>
   * @return The documentCount.
   */
  @java.lang.Override
  public int getDocumentCount() {
    return documentCount_;
  }

  public static final int PREDICTION_COUNT_FIELD_NUMBER = 2;
  private int predictionCount_ = 0;
  /**
   * <code>int32 prediction_count = 2 [json_name = "predictionCount"];</code>
   * @return The predictionCount.
   */
  @java.lang.Override
  public int getPredictionCount() {
    return predictionCount_;
  }

  public static final int OVERALL_CORRECTNESS_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<ai.visma.ssn.dataservice.v1.Correctness> overallCorrectness_;
  /**
   * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
   */
  @java.lang.Override
  public java.util.List<ai.visma.ssn.dataservice.v1.Correctness> getOverallCorrectnessList() {
    return overallCorrectness_;
  }
  /**
   * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends ai.visma.ssn.dataservice.v1.CorrectnessOrBuilder> 
      getOverallCorrectnessOrBuilderList() {
    return overallCorrectness_;
  }
  /**
   * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
   */
  @java.lang.Override
  public int getOverallCorrectnessCount() {
    return overallCorrectness_.size();
  }
  /**
   * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
   */
  @java.lang.Override
  public ai.visma.ssn.dataservice.v1.Correctness getOverallCorrectness(int index) {
    return overallCorrectness_.get(index);
  }
  /**
   * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
   */
  @java.lang.Override
  public ai.visma.ssn.dataservice.v1.CorrectnessOrBuilder getOverallCorrectnessOrBuilder(
      int index) {
    return overallCorrectness_.get(index);
  }

  public static final int FIELD_CORRECTNESS_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private java.util.List<ai.visma.ssn.dataservice.v1.Correctness> fieldCorrectness_;
  /**
   * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
   */
  @java.lang.Override
  public java.util.List<ai.visma.ssn.dataservice.v1.Correctness> getFieldCorrectnessList() {
    return fieldCorrectness_;
  }
  /**
   * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends ai.visma.ssn.dataservice.v1.CorrectnessOrBuilder> 
      getFieldCorrectnessOrBuilderList() {
    return fieldCorrectness_;
  }
  /**
   * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
   */
  @java.lang.Override
  public int getFieldCorrectnessCount() {
    return fieldCorrectness_.size();
  }
  /**
   * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
   */
  @java.lang.Override
  public ai.visma.ssn.dataservice.v1.Correctness getFieldCorrectness(int index) {
    return fieldCorrectness_.get(index);
  }
  /**
   * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
   */
  @java.lang.Override
  public ai.visma.ssn.dataservice.v1.CorrectnessOrBuilder getFieldCorrectnessOrBuilder(
      int index) {
    return fieldCorrectness_.get(index);
  }

  public static final int DIFFERENCES_FIELD_NUMBER = 5;
  @SuppressWarnings("serial")
  private java.util.List<ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison> differences_;
  /**
   * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
   */
  @java.lang.Override
  public java.util.List<ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison> getDifferencesList() {
    return differences_;
  }
  /**
   * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparisonOrBuilder> 
      getDifferencesOrBuilderList() {
    return differences_;
  }
  /**
   * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
   */
  @java.lang.Override
  public int getDifferencesCount() {
    return differences_.size();
  }
  /**
   * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
   */
  @java.lang.Override
  public ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison getDifferences(int index) {
    return differences_.get(index);
  }
  /**
   * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
   */
  @java.lang.Override
  public ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparisonOrBuilder getDifferencesOrBuilder(
      int index) {
    return differences_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (documentCount_ != 0) {
      output.writeInt32(1, documentCount_);
    }
    if (predictionCount_ != 0) {
      output.writeInt32(2, predictionCount_);
    }
    for (int i = 0; i < overallCorrectness_.size(); i++) {
      output.writeMessage(3, overallCorrectness_.get(i));
    }
    for (int i = 0; i < fieldCorrectness_.size(); i++) {
      output.writeMessage(4, fieldCorrectness_.get(i));
    }
    for (int i = 0; i < differences_.size(); i++) {
      output.writeMessage(5, differences_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (documentCount_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, documentCount_);
    }
    if (predictionCount_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, predictionCount_);
    }
    for (int i = 0; i < overallCorrectness_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, overallCorrectness_.get(i));
    }
    for (int i = 0; i < fieldCorrectness_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, fieldCorrectness_.get(i));
    }
    for (int i = 0; i < differences_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, differences_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics)) {
      return super.equals(obj);
    }
    ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics other = (ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics) obj;

    if (getDocumentCount()
        != other.getDocumentCount()) return false;
    if (getPredictionCount()
        != other.getPredictionCount()) return false;
    if (!getOverallCorrectnessList()
        .equals(other.getOverallCorrectnessList())) return false;
    if (!getFieldCorrectnessList()
        .equals(other.getFieldCorrectnessList())) return false;
    if (!getDifferencesList()
        .equals(other.getDifferencesList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + DOCUMENT_COUNT_FIELD_NUMBER;
    hash = (53 * hash) + getDocumentCount();
    hash = (37 * hash) + PREDICTION_COUNT_FIELD_NUMBER;
    hash = (53 * hash) + getPredictionCount();
    if (getOverallCorrectnessCount() > 0) {
      hash = (37 * hash) + OVERALL_CORRECTNESS_FIELD_NUMBER;
      hash = (53 * hash) + getOverallCorrectnessList().hashCode();
    }
    if (getFieldCorrectnessCount() > 0) {
      hash = (37 * hash) + FIELD_CORRECTNESS_FIELD_NUMBER;
      hash = (53 * hash) + getFieldCorrectnessList().hashCode();
    }
    if (getDifferencesCount() > 0) {
      hash = (37 * hash) + DIFFERENCES_FIELD_NUMBER;
      hash = (53 * hash) + getDifferencesList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code ssn.dataservice.v1.AnnotationProcessPredictionMetrics}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:ssn.dataservice.v1.AnnotationProcessPredictionMetrics)
      ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetricsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ai.visma.ssn.dataservice.v1.DataserviceProto.internal_static_ssn_dataservice_v1_AnnotationProcessPredictionMetrics_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ai.visma.ssn.dataservice.v1.DataserviceProto.internal_static_ssn_dataservice_v1_AnnotationProcessPredictionMetrics_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics.class, ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics.Builder.class);
    }

    // Construct using ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      documentCount_ = 0;
      predictionCount_ = 0;
      if (overallCorrectnessBuilder_ == null) {
        overallCorrectness_ = java.util.Collections.emptyList();
      } else {
        overallCorrectness_ = null;
        overallCorrectnessBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      if (fieldCorrectnessBuilder_ == null) {
        fieldCorrectness_ = java.util.Collections.emptyList();
      } else {
        fieldCorrectness_ = null;
        fieldCorrectnessBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      if (differencesBuilder_ == null) {
        differences_ = java.util.Collections.emptyList();
      } else {
        differences_ = null;
        differencesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000010);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return ai.visma.ssn.dataservice.v1.DataserviceProto.internal_static_ssn_dataservice_v1_AnnotationProcessPredictionMetrics_descriptor;
    }

    @java.lang.Override
    public ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics getDefaultInstanceForType() {
      return ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics.getDefaultInstance();
    }

    @java.lang.Override
    public ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics build() {
      ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics buildPartial() {
      ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics result = new ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics result) {
      if (overallCorrectnessBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          overallCorrectness_ = java.util.Collections.unmodifiableList(overallCorrectness_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.overallCorrectness_ = overallCorrectness_;
      } else {
        result.overallCorrectness_ = overallCorrectnessBuilder_.build();
      }
      if (fieldCorrectnessBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          fieldCorrectness_ = java.util.Collections.unmodifiableList(fieldCorrectness_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.fieldCorrectness_ = fieldCorrectness_;
      } else {
        result.fieldCorrectness_ = fieldCorrectnessBuilder_.build();
      }
      if (differencesBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)) {
          differences_ = java.util.Collections.unmodifiableList(differences_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.differences_ = differences_;
      } else {
        result.differences_ = differencesBuilder_.build();
      }
    }

    private void buildPartial0(ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.documentCount_ = documentCount_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.predictionCount_ = predictionCount_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics) {
        return mergeFrom((ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics other) {
      if (other == ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics.getDefaultInstance()) return this;
      if (other.getDocumentCount() != 0) {
        setDocumentCount(other.getDocumentCount());
      }
      if (other.getPredictionCount() != 0) {
        setPredictionCount(other.getPredictionCount());
      }
      if (overallCorrectnessBuilder_ == null) {
        if (!other.overallCorrectness_.isEmpty()) {
          if (overallCorrectness_.isEmpty()) {
            overallCorrectness_ = other.overallCorrectness_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureOverallCorrectnessIsMutable();
            overallCorrectness_.addAll(other.overallCorrectness_);
          }
          onChanged();
        }
      } else {
        if (!other.overallCorrectness_.isEmpty()) {
          if (overallCorrectnessBuilder_.isEmpty()) {
            overallCorrectnessBuilder_.dispose();
            overallCorrectnessBuilder_ = null;
            overallCorrectness_ = other.overallCorrectness_;
            bitField0_ = (bitField0_ & ~0x00000004);
            overallCorrectnessBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getOverallCorrectnessFieldBuilder() : null;
          } else {
            overallCorrectnessBuilder_.addAllMessages(other.overallCorrectness_);
          }
        }
      }
      if (fieldCorrectnessBuilder_ == null) {
        if (!other.fieldCorrectness_.isEmpty()) {
          if (fieldCorrectness_.isEmpty()) {
            fieldCorrectness_ = other.fieldCorrectness_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureFieldCorrectnessIsMutable();
            fieldCorrectness_.addAll(other.fieldCorrectness_);
          }
          onChanged();
        }
      } else {
        if (!other.fieldCorrectness_.isEmpty()) {
          if (fieldCorrectnessBuilder_.isEmpty()) {
            fieldCorrectnessBuilder_.dispose();
            fieldCorrectnessBuilder_ = null;
            fieldCorrectness_ = other.fieldCorrectness_;
            bitField0_ = (bitField0_ & ~0x00000008);
            fieldCorrectnessBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getFieldCorrectnessFieldBuilder() : null;
          } else {
            fieldCorrectnessBuilder_.addAllMessages(other.fieldCorrectness_);
          }
        }
      }
      if (differencesBuilder_ == null) {
        if (!other.differences_.isEmpty()) {
          if (differences_.isEmpty()) {
            differences_ = other.differences_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureDifferencesIsMutable();
            differences_.addAll(other.differences_);
          }
          onChanged();
        }
      } else {
        if (!other.differences_.isEmpty()) {
          if (differencesBuilder_.isEmpty()) {
            differencesBuilder_.dispose();
            differencesBuilder_ = null;
            differences_ = other.differences_;
            bitField0_ = (bitField0_ & ~0x00000010);
            differencesBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getDifferencesFieldBuilder() : null;
          } else {
            differencesBuilder_.addAllMessages(other.differences_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              documentCount_ = input.readInt32();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 16: {
              predictionCount_ = input.readInt32();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 26: {
              ai.visma.ssn.dataservice.v1.Correctness m =
                  input.readMessage(
                      ai.visma.ssn.dataservice.v1.Correctness.parser(),
                      extensionRegistry);
              if (overallCorrectnessBuilder_ == null) {
                ensureOverallCorrectnessIsMutable();
                overallCorrectness_.add(m);
              } else {
                overallCorrectnessBuilder_.addMessage(m);
              }
              break;
            } // case 26
            case 34: {
              ai.visma.ssn.dataservice.v1.Correctness m =
                  input.readMessage(
                      ai.visma.ssn.dataservice.v1.Correctness.parser(),
                      extensionRegistry);
              if (fieldCorrectnessBuilder_ == null) {
                ensureFieldCorrectnessIsMutable();
                fieldCorrectness_.add(m);
              } else {
                fieldCorrectnessBuilder_.addMessage(m);
              }
              break;
            } // case 34
            case 42: {
              ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison m =
                  input.readMessage(
                      ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison.parser(),
                      extensionRegistry);
              if (differencesBuilder_ == null) {
                ensureDifferencesIsMutable();
                differences_.add(m);
              } else {
                differencesBuilder_.addMessage(m);
              }
              break;
            } // case 42
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int documentCount_ ;
    /**
     * <code>int32 document_count = 1 [json_name = "documentCount"];</code>
     * @return The documentCount.
     */
    @java.lang.Override
    public int getDocumentCount() {
      return documentCount_;
    }
    /**
     * <code>int32 document_count = 1 [json_name = "documentCount"];</code>
     * @param value The documentCount to set.
     * @return This builder for chaining.
     */
    public Builder setDocumentCount(int value) {

      documentCount_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>int32 document_count = 1 [json_name = "documentCount"];</code>
     * @return This builder for chaining.
     */
    public Builder clearDocumentCount() {
      bitField0_ = (bitField0_ & ~0x00000001);
      documentCount_ = 0;
      onChanged();
      return this;
    }

    private int predictionCount_ ;
    /**
     * <code>int32 prediction_count = 2 [json_name = "predictionCount"];</code>
     * @return The predictionCount.
     */
    @java.lang.Override
    public int getPredictionCount() {
      return predictionCount_;
    }
    /**
     * <code>int32 prediction_count = 2 [json_name = "predictionCount"];</code>
     * @param value The predictionCount to set.
     * @return This builder for chaining.
     */
    public Builder setPredictionCount(int value) {

      predictionCount_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>int32 prediction_count = 2 [json_name = "predictionCount"];</code>
     * @return This builder for chaining.
     */
    public Builder clearPredictionCount() {
      bitField0_ = (bitField0_ & ~0x00000002);
      predictionCount_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<ai.visma.ssn.dataservice.v1.Correctness> overallCorrectness_ =
      java.util.Collections.emptyList();
    private void ensureOverallCorrectnessIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        overallCorrectness_ = new java.util.ArrayList<ai.visma.ssn.dataservice.v1.Correctness>(overallCorrectness_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        ai.visma.ssn.dataservice.v1.Correctness, ai.visma.ssn.dataservice.v1.Correctness.Builder, ai.visma.ssn.dataservice.v1.CorrectnessOrBuilder> overallCorrectnessBuilder_;

    /**
     * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
     */
    public java.util.List<ai.visma.ssn.dataservice.v1.Correctness> getOverallCorrectnessList() {
      if (overallCorrectnessBuilder_ == null) {
        return java.util.Collections.unmodifiableList(overallCorrectness_);
      } else {
        return overallCorrectnessBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
     */
    public int getOverallCorrectnessCount() {
      if (overallCorrectnessBuilder_ == null) {
        return overallCorrectness_.size();
      } else {
        return overallCorrectnessBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
     */
    public ai.visma.ssn.dataservice.v1.Correctness getOverallCorrectness(int index) {
      if (overallCorrectnessBuilder_ == null) {
        return overallCorrectness_.get(index);
      } else {
        return overallCorrectnessBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
     */
    public Builder setOverallCorrectness(
        int index, ai.visma.ssn.dataservice.v1.Correctness value) {
      if (overallCorrectnessBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOverallCorrectnessIsMutable();
        overallCorrectness_.set(index, value);
        onChanged();
      } else {
        overallCorrectnessBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
     */
    public Builder setOverallCorrectness(
        int index, ai.visma.ssn.dataservice.v1.Correctness.Builder builderForValue) {
      if (overallCorrectnessBuilder_ == null) {
        ensureOverallCorrectnessIsMutable();
        overallCorrectness_.set(index, builderForValue.build());
        onChanged();
      } else {
        overallCorrectnessBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
     */
    public Builder addOverallCorrectness(ai.visma.ssn.dataservice.v1.Correctness value) {
      if (overallCorrectnessBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOverallCorrectnessIsMutable();
        overallCorrectness_.add(value);
        onChanged();
      } else {
        overallCorrectnessBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
     */
    public Builder addOverallCorrectness(
        int index, ai.visma.ssn.dataservice.v1.Correctness value) {
      if (overallCorrectnessBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureOverallCorrectnessIsMutable();
        overallCorrectness_.add(index, value);
        onChanged();
      } else {
        overallCorrectnessBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
     */
    public Builder addOverallCorrectness(
        ai.visma.ssn.dataservice.v1.Correctness.Builder builderForValue) {
      if (overallCorrectnessBuilder_ == null) {
        ensureOverallCorrectnessIsMutable();
        overallCorrectness_.add(builderForValue.build());
        onChanged();
      } else {
        overallCorrectnessBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
     */
    public Builder addOverallCorrectness(
        int index, ai.visma.ssn.dataservice.v1.Correctness.Builder builderForValue) {
      if (overallCorrectnessBuilder_ == null) {
        ensureOverallCorrectnessIsMutable();
        overallCorrectness_.add(index, builderForValue.build());
        onChanged();
      } else {
        overallCorrectnessBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
     */
    public Builder addAllOverallCorrectness(
        java.lang.Iterable<? extends ai.visma.ssn.dataservice.v1.Correctness> values) {
      if (overallCorrectnessBuilder_ == null) {
        ensureOverallCorrectnessIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, overallCorrectness_);
        onChanged();
      } else {
        overallCorrectnessBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
     */
    public Builder clearOverallCorrectness() {
      if (overallCorrectnessBuilder_ == null) {
        overallCorrectness_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        overallCorrectnessBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
     */
    public Builder removeOverallCorrectness(int index) {
      if (overallCorrectnessBuilder_ == null) {
        ensureOverallCorrectnessIsMutable();
        overallCorrectness_.remove(index);
        onChanged();
      } else {
        overallCorrectnessBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
     */
    public ai.visma.ssn.dataservice.v1.Correctness.Builder getOverallCorrectnessBuilder(
        int index) {
      return getOverallCorrectnessFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
     */
    public ai.visma.ssn.dataservice.v1.CorrectnessOrBuilder getOverallCorrectnessOrBuilder(
        int index) {
      if (overallCorrectnessBuilder_ == null) {
        return overallCorrectness_.get(index);  } else {
        return overallCorrectnessBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
     */
    public java.util.List<? extends ai.visma.ssn.dataservice.v1.CorrectnessOrBuilder> 
         getOverallCorrectnessOrBuilderList() {
      if (overallCorrectnessBuilder_ != null) {
        return overallCorrectnessBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(overallCorrectness_);
      }
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
     */
    public ai.visma.ssn.dataservice.v1.Correctness.Builder addOverallCorrectnessBuilder() {
      return getOverallCorrectnessFieldBuilder().addBuilder(
          ai.visma.ssn.dataservice.v1.Correctness.getDefaultInstance());
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
     */
    public ai.visma.ssn.dataservice.v1.Correctness.Builder addOverallCorrectnessBuilder(
        int index) {
      return getOverallCorrectnessFieldBuilder().addBuilder(
          index, ai.visma.ssn.dataservice.v1.Correctness.getDefaultInstance());
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness overall_correctness = 3 [json_name = "overallCorrectness"];</code>
     */
    public java.util.List<ai.visma.ssn.dataservice.v1.Correctness.Builder> 
         getOverallCorrectnessBuilderList() {
      return getOverallCorrectnessFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        ai.visma.ssn.dataservice.v1.Correctness, ai.visma.ssn.dataservice.v1.Correctness.Builder, ai.visma.ssn.dataservice.v1.CorrectnessOrBuilder> 
        getOverallCorrectnessFieldBuilder() {
      if (overallCorrectnessBuilder_ == null) {
        overallCorrectnessBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            ai.visma.ssn.dataservice.v1.Correctness, ai.visma.ssn.dataservice.v1.Correctness.Builder, ai.visma.ssn.dataservice.v1.CorrectnessOrBuilder>(
                overallCorrectness_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        overallCorrectness_ = null;
      }
      return overallCorrectnessBuilder_;
    }

    private java.util.List<ai.visma.ssn.dataservice.v1.Correctness> fieldCorrectness_ =
      java.util.Collections.emptyList();
    private void ensureFieldCorrectnessIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        fieldCorrectness_ = new java.util.ArrayList<ai.visma.ssn.dataservice.v1.Correctness>(fieldCorrectness_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        ai.visma.ssn.dataservice.v1.Correctness, ai.visma.ssn.dataservice.v1.Correctness.Builder, ai.visma.ssn.dataservice.v1.CorrectnessOrBuilder> fieldCorrectnessBuilder_;

    /**
     * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
     */
    public java.util.List<ai.visma.ssn.dataservice.v1.Correctness> getFieldCorrectnessList() {
      if (fieldCorrectnessBuilder_ == null) {
        return java.util.Collections.unmodifiableList(fieldCorrectness_);
      } else {
        return fieldCorrectnessBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
     */
    public int getFieldCorrectnessCount() {
      if (fieldCorrectnessBuilder_ == null) {
        return fieldCorrectness_.size();
      } else {
        return fieldCorrectnessBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
     */
    public ai.visma.ssn.dataservice.v1.Correctness getFieldCorrectness(int index) {
      if (fieldCorrectnessBuilder_ == null) {
        return fieldCorrectness_.get(index);
      } else {
        return fieldCorrectnessBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
     */
    public Builder setFieldCorrectness(
        int index, ai.visma.ssn.dataservice.v1.Correctness value) {
      if (fieldCorrectnessBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFieldCorrectnessIsMutable();
        fieldCorrectness_.set(index, value);
        onChanged();
      } else {
        fieldCorrectnessBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
     */
    public Builder setFieldCorrectness(
        int index, ai.visma.ssn.dataservice.v1.Correctness.Builder builderForValue) {
      if (fieldCorrectnessBuilder_ == null) {
        ensureFieldCorrectnessIsMutable();
        fieldCorrectness_.set(index, builderForValue.build());
        onChanged();
      } else {
        fieldCorrectnessBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
     */
    public Builder addFieldCorrectness(ai.visma.ssn.dataservice.v1.Correctness value) {
      if (fieldCorrectnessBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFieldCorrectnessIsMutable();
        fieldCorrectness_.add(value);
        onChanged();
      } else {
        fieldCorrectnessBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
     */
    public Builder addFieldCorrectness(
        int index, ai.visma.ssn.dataservice.v1.Correctness value) {
      if (fieldCorrectnessBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFieldCorrectnessIsMutable();
        fieldCorrectness_.add(index, value);
        onChanged();
      } else {
        fieldCorrectnessBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
     */
    public Builder addFieldCorrectness(
        ai.visma.ssn.dataservice.v1.Correctness.Builder builderForValue) {
      if (fieldCorrectnessBuilder_ == null) {
        ensureFieldCorrectnessIsMutable();
        fieldCorrectness_.add(builderForValue.build());
        onChanged();
      } else {
        fieldCorrectnessBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
     */
    public Builder addFieldCorrectness(
        int index, ai.visma.ssn.dataservice.v1.Correctness.Builder builderForValue) {
      if (fieldCorrectnessBuilder_ == null) {
        ensureFieldCorrectnessIsMutable();
        fieldCorrectness_.add(index, builderForValue.build());
        onChanged();
      } else {
        fieldCorrectnessBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
     */
    public Builder addAllFieldCorrectness(
        java.lang.Iterable<? extends ai.visma.ssn.dataservice.v1.Correctness> values) {
      if (fieldCorrectnessBuilder_ == null) {
        ensureFieldCorrectnessIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, fieldCorrectness_);
        onChanged();
      } else {
        fieldCorrectnessBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
     */
    public Builder clearFieldCorrectness() {
      if (fieldCorrectnessBuilder_ == null) {
        fieldCorrectness_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        fieldCorrectnessBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
     */
    public Builder removeFieldCorrectness(int index) {
      if (fieldCorrectnessBuilder_ == null) {
        ensureFieldCorrectnessIsMutable();
        fieldCorrectness_.remove(index);
        onChanged();
      } else {
        fieldCorrectnessBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
     */
    public ai.visma.ssn.dataservice.v1.Correctness.Builder getFieldCorrectnessBuilder(
        int index) {
      return getFieldCorrectnessFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
     */
    public ai.visma.ssn.dataservice.v1.CorrectnessOrBuilder getFieldCorrectnessOrBuilder(
        int index) {
      if (fieldCorrectnessBuilder_ == null) {
        return fieldCorrectness_.get(index);  } else {
        return fieldCorrectnessBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
     */
    public java.util.List<? extends ai.visma.ssn.dataservice.v1.CorrectnessOrBuilder> 
         getFieldCorrectnessOrBuilderList() {
      if (fieldCorrectnessBuilder_ != null) {
        return fieldCorrectnessBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(fieldCorrectness_);
      }
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
     */
    public ai.visma.ssn.dataservice.v1.Correctness.Builder addFieldCorrectnessBuilder() {
      return getFieldCorrectnessFieldBuilder().addBuilder(
          ai.visma.ssn.dataservice.v1.Correctness.getDefaultInstance());
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
     */
    public ai.visma.ssn.dataservice.v1.Correctness.Builder addFieldCorrectnessBuilder(
        int index) {
      return getFieldCorrectnessFieldBuilder().addBuilder(
          index, ai.visma.ssn.dataservice.v1.Correctness.getDefaultInstance());
    }
    /**
     * <code>repeated .ssn.dataservice.v1.Correctness field_correctness = 4 [json_name = "fieldCorrectness"];</code>
     */
    public java.util.List<ai.visma.ssn.dataservice.v1.Correctness.Builder> 
         getFieldCorrectnessBuilderList() {
      return getFieldCorrectnessFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        ai.visma.ssn.dataservice.v1.Correctness, ai.visma.ssn.dataservice.v1.Correctness.Builder, ai.visma.ssn.dataservice.v1.CorrectnessOrBuilder> 
        getFieldCorrectnessFieldBuilder() {
      if (fieldCorrectnessBuilder_ == null) {
        fieldCorrectnessBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            ai.visma.ssn.dataservice.v1.Correctness, ai.visma.ssn.dataservice.v1.Correctness.Builder, ai.visma.ssn.dataservice.v1.CorrectnessOrBuilder>(
                fieldCorrectness_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        fieldCorrectness_ = null;
      }
      return fieldCorrectnessBuilder_;
    }

    private java.util.List<ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison> differences_ =
      java.util.Collections.emptyList();
    private void ensureDifferencesIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        differences_ = new java.util.ArrayList<ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison>(differences_);
        bitField0_ |= 0x00000010;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison, ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison.Builder, ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparisonOrBuilder> differencesBuilder_;

    /**
     * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
     */
    public java.util.List<ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison> getDifferencesList() {
      if (differencesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(differences_);
      } else {
        return differencesBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
     */
    public int getDifferencesCount() {
      if (differencesBuilder_ == null) {
        return differences_.size();
      } else {
        return differencesBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
     */
    public ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison getDifferences(int index) {
      if (differencesBuilder_ == null) {
        return differences_.get(index);
      } else {
        return differencesBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
     */
    public Builder setDifferences(
        int index, ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison value) {
      if (differencesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDifferencesIsMutable();
        differences_.set(index, value);
        onChanged();
      } else {
        differencesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
     */
    public Builder setDifferences(
        int index, ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison.Builder builderForValue) {
      if (differencesBuilder_ == null) {
        ensureDifferencesIsMutable();
        differences_.set(index, builderForValue.build());
        onChanged();
      } else {
        differencesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
     */
    public Builder addDifferences(ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison value) {
      if (differencesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDifferencesIsMutable();
        differences_.add(value);
        onChanged();
      } else {
        differencesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
     */
    public Builder addDifferences(
        int index, ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison value) {
      if (differencesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDifferencesIsMutable();
        differences_.add(index, value);
        onChanged();
      } else {
        differencesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
     */
    public Builder addDifferences(
        ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison.Builder builderForValue) {
      if (differencesBuilder_ == null) {
        ensureDifferencesIsMutable();
        differences_.add(builderForValue.build());
        onChanged();
      } else {
        differencesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
     */
    public Builder addDifferences(
        int index, ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison.Builder builderForValue) {
      if (differencesBuilder_ == null) {
        ensureDifferencesIsMutable();
        differences_.add(index, builderForValue.build());
        onChanged();
      } else {
        differencesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
     */
    public Builder addAllDifferences(
        java.lang.Iterable<? extends ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison> values) {
      if (differencesBuilder_ == null) {
        ensureDifferencesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, differences_);
        onChanged();
      } else {
        differencesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
     */
    public Builder clearDifferences() {
      if (differencesBuilder_ == null) {
        differences_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
      } else {
        differencesBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
     */
    public Builder removeDifferences(int index) {
      if (differencesBuilder_ == null) {
        ensureDifferencesIsMutable();
        differences_.remove(index);
        onChanged();
      } else {
        differencesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
     */
    public ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison.Builder getDifferencesBuilder(
        int index) {
      return getDifferencesFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
     */
    public ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparisonOrBuilder getDifferencesOrBuilder(
        int index) {
      if (differencesBuilder_ == null) {
        return differences_.get(index);  } else {
        return differencesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
     */
    public java.util.List<? extends ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparisonOrBuilder> 
         getDifferencesOrBuilderList() {
      if (differencesBuilder_ != null) {
        return differencesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(differences_);
      }
    }
    /**
     * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
     */
    public ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison.Builder addDifferencesBuilder() {
      return getDifferencesFieldBuilder().addBuilder(
          ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison.getDefaultInstance());
    }
    /**
     * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
     */
    public ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison.Builder addDifferencesBuilder(
        int index) {
      return getDifferencesFieldBuilder().addBuilder(
          index, ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison.getDefaultInstance());
    }
    /**
     * <code>repeated .ssn.dataservice.v1.AnnotationProcessFieldsComparison differences = 5 [json_name = "differences"];</code>
     */
    public java.util.List<ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison.Builder> 
         getDifferencesBuilderList() {
      return getDifferencesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison, ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison.Builder, ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparisonOrBuilder> 
        getDifferencesFieldBuilder() {
      if (differencesBuilder_ == null) {
        differencesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison, ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparison.Builder, ai.visma.ssn.dataservice.v1.AnnotationProcessFieldsComparisonOrBuilder>(
                differences_,
                ((bitField0_ & 0x00000010) != 0),
                getParentForChildren(),
                isClean());
        differences_ = null;
      }
      return differencesBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:ssn.dataservice.v1.AnnotationProcessPredictionMetrics)
  }

  // @@protoc_insertion_point(class_scope:ssn.dataservice.v1.AnnotationProcessPredictionMetrics)
  private static final ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics();
  }

  public static ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<AnnotationProcessPredictionMetrics>
      PARSER = new com.google.protobuf.AbstractParser<AnnotationProcessPredictionMetrics>() {
    @java.lang.Override
    public AnnotationProcessPredictionMetrics parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<AnnotationProcessPredictionMetrics> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<AnnotationProcessPredictionMetrics> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public ai.visma.ssn.dataservice.v1.AnnotationProcessPredictionMetrics getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}


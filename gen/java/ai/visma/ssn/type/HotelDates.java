// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ssn/type/hotel_dates.proto
// Protobuf Java Version: 4.29.3

package ai.visma.ssn.type;

/**
 * Protobuf type {@code ssn.type.HotelDates}
 */
public final class HotelDates extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:ssn.type.HotelDates)
    HotelDatesOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      HotelDates.class.getName());
  }
  // Use HotelDates.newBuilder() to construct.
  private HotelDates(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private HotelDates() {
    checkInDate_ = java.util.Collections.emptyList();
    checkOutDate_ = java.util.Collections.emptyList();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return ai.visma.ssn.type.HotelDatesProto.internal_static_ssn_type_HotelDates_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return ai.visma.ssn.type.HotelDatesProto.internal_static_ssn_type_HotelDates_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            ai.visma.ssn.type.HotelDates.class, ai.visma.ssn.type.HotelDates.Builder.class);
  }

  public static final int CHECK_IN_DATE_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private java.util.List<ai.visma.ssn.type.Candidate> checkInDate_;
  /**
   * <pre>
   * checkInDate
   * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
   * Example: "2019-12-31"
   * </pre>
   *
   * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
   */
  @java.lang.Override
  public java.util.List<ai.visma.ssn.type.Candidate> getCheckInDateList() {
    return checkInDate_;
  }
  /**
   * <pre>
   * checkInDate
   * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
   * Example: "2019-12-31"
   * </pre>
   *
   * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends ai.visma.ssn.type.CandidateOrBuilder> 
      getCheckInDateOrBuilderList() {
    return checkInDate_;
  }
  /**
   * <pre>
   * checkInDate
   * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
   * Example: "2019-12-31"
   * </pre>
   *
   * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
   */
  @java.lang.Override
  public int getCheckInDateCount() {
    return checkInDate_.size();
  }
  /**
   * <pre>
   * checkInDate
   * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
   * Example: "2019-12-31"
   * </pre>
   *
   * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
   */
  @java.lang.Override
  public ai.visma.ssn.type.Candidate getCheckInDate(int index) {
    return checkInDate_.get(index);
  }
  /**
   * <pre>
   * checkInDate
   * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
   * Example: "2019-12-31"
   * </pre>
   *
   * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
   */
  @java.lang.Override
  public ai.visma.ssn.type.CandidateOrBuilder getCheckInDateOrBuilder(
      int index) {
    return checkInDate_.get(index);
  }

  public static final int CHECK_OUT_DATE_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<ai.visma.ssn.type.Candidate> checkOutDate_;
  /**
   * <pre>
   * checkOutDate
   * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
   * Example: "2019-12-31"
   * </pre>
   *
   * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
   */
  @java.lang.Override
  public java.util.List<ai.visma.ssn.type.Candidate> getCheckOutDateList() {
    return checkOutDate_;
  }
  /**
   * <pre>
   * checkOutDate
   * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
   * Example: "2019-12-31"
   * </pre>
   *
   * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends ai.visma.ssn.type.CandidateOrBuilder> 
      getCheckOutDateOrBuilderList() {
    return checkOutDate_;
  }
  /**
   * <pre>
   * checkOutDate
   * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
   * Example: "2019-12-31"
   * </pre>
   *
   * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
   */
  @java.lang.Override
  public int getCheckOutDateCount() {
    return checkOutDate_.size();
  }
  /**
   * <pre>
   * checkOutDate
   * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
   * Example: "2019-12-31"
   * </pre>
   *
   * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
   */
  @java.lang.Override
  public ai.visma.ssn.type.Candidate getCheckOutDate(int index) {
    return checkOutDate_.get(index);
  }
  /**
   * <pre>
   * checkOutDate
   * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
   * Example: "2019-12-31"
   * </pre>
   *
   * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
   */
  @java.lang.Override
  public ai.visma.ssn.type.CandidateOrBuilder getCheckOutDateOrBuilder(
      int index) {
    return checkOutDate_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < checkInDate_.size(); i++) {
      output.writeMessage(1, checkInDate_.get(i));
    }
    for (int i = 0; i < checkOutDate_.size(); i++) {
      output.writeMessage(2, checkOutDate_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < checkInDate_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, checkInDate_.get(i));
    }
    for (int i = 0; i < checkOutDate_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, checkOutDate_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof ai.visma.ssn.type.HotelDates)) {
      return super.equals(obj);
    }
    ai.visma.ssn.type.HotelDates other = (ai.visma.ssn.type.HotelDates) obj;

    if (!getCheckInDateList()
        .equals(other.getCheckInDateList())) return false;
    if (!getCheckOutDateList()
        .equals(other.getCheckOutDateList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getCheckInDateCount() > 0) {
      hash = (37 * hash) + CHECK_IN_DATE_FIELD_NUMBER;
      hash = (53 * hash) + getCheckInDateList().hashCode();
    }
    if (getCheckOutDateCount() > 0) {
      hash = (37 * hash) + CHECK_OUT_DATE_FIELD_NUMBER;
      hash = (53 * hash) + getCheckOutDateList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static ai.visma.ssn.type.HotelDates parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.visma.ssn.type.HotelDates parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.visma.ssn.type.HotelDates parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.visma.ssn.type.HotelDates parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.visma.ssn.type.HotelDates parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ai.visma.ssn.type.HotelDates parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ai.visma.ssn.type.HotelDates parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static ai.visma.ssn.type.HotelDates parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static ai.visma.ssn.type.HotelDates parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static ai.visma.ssn.type.HotelDates parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static ai.visma.ssn.type.HotelDates parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static ai.visma.ssn.type.HotelDates parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ai.visma.ssn.type.HotelDates prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code ssn.type.HotelDates}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:ssn.type.HotelDates)
      ai.visma.ssn.type.HotelDatesOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return ai.visma.ssn.type.HotelDatesProto.internal_static_ssn_type_HotelDates_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return ai.visma.ssn.type.HotelDatesProto.internal_static_ssn_type_HotelDates_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ai.visma.ssn.type.HotelDates.class, ai.visma.ssn.type.HotelDates.Builder.class);
    }

    // Construct using ai.visma.ssn.type.HotelDates.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (checkInDateBuilder_ == null) {
        checkInDate_ = java.util.Collections.emptyList();
      } else {
        checkInDate_ = null;
        checkInDateBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      if (checkOutDateBuilder_ == null) {
        checkOutDate_ = java.util.Collections.emptyList();
      } else {
        checkOutDate_ = null;
        checkOutDateBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return ai.visma.ssn.type.HotelDatesProto.internal_static_ssn_type_HotelDates_descriptor;
    }

    @java.lang.Override
    public ai.visma.ssn.type.HotelDates getDefaultInstanceForType() {
      return ai.visma.ssn.type.HotelDates.getDefaultInstance();
    }

    @java.lang.Override
    public ai.visma.ssn.type.HotelDates build() {
      ai.visma.ssn.type.HotelDates result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public ai.visma.ssn.type.HotelDates buildPartial() {
      ai.visma.ssn.type.HotelDates result = new ai.visma.ssn.type.HotelDates(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(ai.visma.ssn.type.HotelDates result) {
      if (checkInDateBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          checkInDate_ = java.util.Collections.unmodifiableList(checkInDate_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.checkInDate_ = checkInDate_;
      } else {
        result.checkInDate_ = checkInDateBuilder_.build();
      }
      if (checkOutDateBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          checkOutDate_ = java.util.Collections.unmodifiableList(checkOutDate_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.checkOutDate_ = checkOutDate_;
      } else {
        result.checkOutDate_ = checkOutDateBuilder_.build();
      }
    }

    private void buildPartial0(ai.visma.ssn.type.HotelDates result) {
      int from_bitField0_ = bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof ai.visma.ssn.type.HotelDates) {
        return mergeFrom((ai.visma.ssn.type.HotelDates)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(ai.visma.ssn.type.HotelDates other) {
      if (other == ai.visma.ssn.type.HotelDates.getDefaultInstance()) return this;
      if (checkInDateBuilder_ == null) {
        if (!other.checkInDate_.isEmpty()) {
          if (checkInDate_.isEmpty()) {
            checkInDate_ = other.checkInDate_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCheckInDateIsMutable();
            checkInDate_.addAll(other.checkInDate_);
          }
          onChanged();
        }
      } else {
        if (!other.checkInDate_.isEmpty()) {
          if (checkInDateBuilder_.isEmpty()) {
            checkInDateBuilder_.dispose();
            checkInDateBuilder_ = null;
            checkInDate_ = other.checkInDate_;
            bitField0_ = (bitField0_ & ~0x00000001);
            checkInDateBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getCheckInDateFieldBuilder() : null;
          } else {
            checkInDateBuilder_.addAllMessages(other.checkInDate_);
          }
        }
      }
      if (checkOutDateBuilder_ == null) {
        if (!other.checkOutDate_.isEmpty()) {
          if (checkOutDate_.isEmpty()) {
            checkOutDate_ = other.checkOutDate_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCheckOutDateIsMutable();
            checkOutDate_.addAll(other.checkOutDate_);
          }
          onChanged();
        }
      } else {
        if (!other.checkOutDate_.isEmpty()) {
          if (checkOutDateBuilder_.isEmpty()) {
            checkOutDateBuilder_.dispose();
            checkOutDateBuilder_ = null;
            checkOutDate_ = other.checkOutDate_;
            bitField0_ = (bitField0_ & ~0x00000002);
            checkOutDateBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getCheckOutDateFieldBuilder() : null;
          } else {
            checkOutDateBuilder_.addAllMessages(other.checkOutDate_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              ai.visma.ssn.type.Candidate m =
                  input.readMessage(
                      ai.visma.ssn.type.Candidate.parser(),
                      extensionRegistry);
              if (checkInDateBuilder_ == null) {
                ensureCheckInDateIsMutable();
                checkInDate_.add(m);
              } else {
                checkInDateBuilder_.addMessage(m);
              }
              break;
            } // case 10
            case 18: {
              ai.visma.ssn.type.Candidate m =
                  input.readMessage(
                      ai.visma.ssn.type.Candidate.parser(),
                      extensionRegistry);
              if (checkOutDateBuilder_ == null) {
                ensureCheckOutDateIsMutable();
                checkOutDate_.add(m);
              } else {
                checkOutDateBuilder_.addMessage(m);
              }
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.util.List<ai.visma.ssn.type.Candidate> checkInDate_ =
      java.util.Collections.emptyList();
    private void ensureCheckInDateIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        checkInDate_ = new java.util.ArrayList<ai.visma.ssn.type.Candidate>(checkInDate_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        ai.visma.ssn.type.Candidate, ai.visma.ssn.type.Candidate.Builder, ai.visma.ssn.type.CandidateOrBuilder> checkInDateBuilder_;

    /**
     * <pre>
     * checkInDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
     */
    public java.util.List<ai.visma.ssn.type.Candidate> getCheckInDateList() {
      if (checkInDateBuilder_ == null) {
        return java.util.Collections.unmodifiableList(checkInDate_);
      } else {
        return checkInDateBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * checkInDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
     */
    public int getCheckInDateCount() {
      if (checkInDateBuilder_ == null) {
        return checkInDate_.size();
      } else {
        return checkInDateBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * checkInDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
     */
    public ai.visma.ssn.type.Candidate getCheckInDate(int index) {
      if (checkInDateBuilder_ == null) {
        return checkInDate_.get(index);
      } else {
        return checkInDateBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * checkInDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
     */
    public Builder setCheckInDate(
        int index, ai.visma.ssn.type.Candidate value) {
      if (checkInDateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCheckInDateIsMutable();
        checkInDate_.set(index, value);
        onChanged();
      } else {
        checkInDateBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * checkInDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
     */
    public Builder setCheckInDate(
        int index, ai.visma.ssn.type.Candidate.Builder builderForValue) {
      if (checkInDateBuilder_ == null) {
        ensureCheckInDateIsMutable();
        checkInDate_.set(index, builderForValue.build());
        onChanged();
      } else {
        checkInDateBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * checkInDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
     */
    public Builder addCheckInDate(ai.visma.ssn.type.Candidate value) {
      if (checkInDateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCheckInDateIsMutable();
        checkInDate_.add(value);
        onChanged();
      } else {
        checkInDateBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * checkInDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
     */
    public Builder addCheckInDate(
        int index, ai.visma.ssn.type.Candidate value) {
      if (checkInDateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCheckInDateIsMutable();
        checkInDate_.add(index, value);
        onChanged();
      } else {
        checkInDateBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * checkInDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
     */
    public Builder addCheckInDate(
        ai.visma.ssn.type.Candidate.Builder builderForValue) {
      if (checkInDateBuilder_ == null) {
        ensureCheckInDateIsMutable();
        checkInDate_.add(builderForValue.build());
        onChanged();
      } else {
        checkInDateBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * checkInDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
     */
    public Builder addCheckInDate(
        int index, ai.visma.ssn.type.Candidate.Builder builderForValue) {
      if (checkInDateBuilder_ == null) {
        ensureCheckInDateIsMutable();
        checkInDate_.add(index, builderForValue.build());
        onChanged();
      } else {
        checkInDateBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * checkInDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
     */
    public Builder addAllCheckInDate(
        java.lang.Iterable<? extends ai.visma.ssn.type.Candidate> values) {
      if (checkInDateBuilder_ == null) {
        ensureCheckInDateIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, checkInDate_);
        onChanged();
      } else {
        checkInDateBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * checkInDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
     */
    public Builder clearCheckInDate() {
      if (checkInDateBuilder_ == null) {
        checkInDate_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        checkInDateBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * checkInDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
     */
    public Builder removeCheckInDate(int index) {
      if (checkInDateBuilder_ == null) {
        ensureCheckInDateIsMutable();
        checkInDate_.remove(index);
        onChanged();
      } else {
        checkInDateBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * checkInDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
     */
    public ai.visma.ssn.type.Candidate.Builder getCheckInDateBuilder(
        int index) {
      return getCheckInDateFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * checkInDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
     */
    public ai.visma.ssn.type.CandidateOrBuilder getCheckInDateOrBuilder(
        int index) {
      if (checkInDateBuilder_ == null) {
        return checkInDate_.get(index);  } else {
        return checkInDateBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * checkInDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
     */
    public java.util.List<? extends ai.visma.ssn.type.CandidateOrBuilder> 
         getCheckInDateOrBuilderList() {
      if (checkInDateBuilder_ != null) {
        return checkInDateBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(checkInDate_);
      }
    }
    /**
     * <pre>
     * checkInDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
     */
    public ai.visma.ssn.type.Candidate.Builder addCheckInDateBuilder() {
      return getCheckInDateFieldBuilder().addBuilder(
          ai.visma.ssn.type.Candidate.getDefaultInstance());
    }
    /**
     * <pre>
     * checkInDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
     */
    public ai.visma.ssn.type.Candidate.Builder addCheckInDateBuilder(
        int index) {
      return getCheckInDateFieldBuilder().addBuilder(
          index, ai.visma.ssn.type.Candidate.getDefaultInstance());
    }
    /**
     * <pre>
     * checkInDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_in_date = 1 [json_name = "checkInDate"];</code>
     */
    public java.util.List<ai.visma.ssn.type.Candidate.Builder> 
         getCheckInDateBuilderList() {
      return getCheckInDateFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        ai.visma.ssn.type.Candidate, ai.visma.ssn.type.Candidate.Builder, ai.visma.ssn.type.CandidateOrBuilder> 
        getCheckInDateFieldBuilder() {
      if (checkInDateBuilder_ == null) {
        checkInDateBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            ai.visma.ssn.type.Candidate, ai.visma.ssn.type.Candidate.Builder, ai.visma.ssn.type.CandidateOrBuilder>(
                checkInDate_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        checkInDate_ = null;
      }
      return checkInDateBuilder_;
    }

    private java.util.List<ai.visma.ssn.type.Candidate> checkOutDate_ =
      java.util.Collections.emptyList();
    private void ensureCheckOutDateIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        checkOutDate_ = new java.util.ArrayList<ai.visma.ssn.type.Candidate>(checkOutDate_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        ai.visma.ssn.type.Candidate, ai.visma.ssn.type.Candidate.Builder, ai.visma.ssn.type.CandidateOrBuilder> checkOutDateBuilder_;

    /**
     * <pre>
     * checkOutDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
     */
    public java.util.List<ai.visma.ssn.type.Candidate> getCheckOutDateList() {
      if (checkOutDateBuilder_ == null) {
        return java.util.Collections.unmodifiableList(checkOutDate_);
      } else {
        return checkOutDateBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * checkOutDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
     */
    public int getCheckOutDateCount() {
      if (checkOutDateBuilder_ == null) {
        return checkOutDate_.size();
      } else {
        return checkOutDateBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * checkOutDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
     */
    public ai.visma.ssn.type.Candidate getCheckOutDate(int index) {
      if (checkOutDateBuilder_ == null) {
        return checkOutDate_.get(index);
      } else {
        return checkOutDateBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * checkOutDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
     */
    public Builder setCheckOutDate(
        int index, ai.visma.ssn.type.Candidate value) {
      if (checkOutDateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCheckOutDateIsMutable();
        checkOutDate_.set(index, value);
        onChanged();
      } else {
        checkOutDateBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * checkOutDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
     */
    public Builder setCheckOutDate(
        int index, ai.visma.ssn.type.Candidate.Builder builderForValue) {
      if (checkOutDateBuilder_ == null) {
        ensureCheckOutDateIsMutable();
        checkOutDate_.set(index, builderForValue.build());
        onChanged();
      } else {
        checkOutDateBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * checkOutDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
     */
    public Builder addCheckOutDate(ai.visma.ssn.type.Candidate value) {
      if (checkOutDateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCheckOutDateIsMutable();
        checkOutDate_.add(value);
        onChanged();
      } else {
        checkOutDateBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * checkOutDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
     */
    public Builder addCheckOutDate(
        int index, ai.visma.ssn.type.Candidate value) {
      if (checkOutDateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCheckOutDateIsMutable();
        checkOutDate_.add(index, value);
        onChanged();
      } else {
        checkOutDateBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * checkOutDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
     */
    public Builder addCheckOutDate(
        ai.visma.ssn.type.Candidate.Builder builderForValue) {
      if (checkOutDateBuilder_ == null) {
        ensureCheckOutDateIsMutable();
        checkOutDate_.add(builderForValue.build());
        onChanged();
      } else {
        checkOutDateBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * checkOutDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
     */
    public Builder addCheckOutDate(
        int index, ai.visma.ssn.type.Candidate.Builder builderForValue) {
      if (checkOutDateBuilder_ == null) {
        ensureCheckOutDateIsMutable();
        checkOutDate_.add(index, builderForValue.build());
        onChanged();
      } else {
        checkOutDateBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * checkOutDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
     */
    public Builder addAllCheckOutDate(
        java.lang.Iterable<? extends ai.visma.ssn.type.Candidate> values) {
      if (checkOutDateBuilder_ == null) {
        ensureCheckOutDateIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, checkOutDate_);
        onChanged();
      } else {
        checkOutDateBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * checkOutDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
     */
    public Builder clearCheckOutDate() {
      if (checkOutDateBuilder_ == null) {
        checkOutDate_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        checkOutDateBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * checkOutDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
     */
    public Builder removeCheckOutDate(int index) {
      if (checkOutDateBuilder_ == null) {
        ensureCheckOutDateIsMutable();
        checkOutDate_.remove(index);
        onChanged();
      } else {
        checkOutDateBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * checkOutDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
     */
    public ai.visma.ssn.type.Candidate.Builder getCheckOutDateBuilder(
        int index) {
      return getCheckOutDateFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * checkOutDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
     */
    public ai.visma.ssn.type.CandidateOrBuilder getCheckOutDateOrBuilder(
        int index) {
      if (checkOutDateBuilder_ == null) {
        return checkOutDate_.get(index);  } else {
        return checkOutDateBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * checkOutDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
     */
    public java.util.List<? extends ai.visma.ssn.type.CandidateOrBuilder> 
         getCheckOutDateOrBuilderList() {
      if (checkOutDateBuilder_ != null) {
        return checkOutDateBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(checkOutDate_);
      }
    }
    /**
     * <pre>
     * checkOutDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
     */
    public ai.visma.ssn.type.Candidate.Builder addCheckOutDateBuilder() {
      return getCheckOutDateFieldBuilder().addBuilder(
          ai.visma.ssn.type.Candidate.getDefaultInstance());
    }
    /**
     * <pre>
     * checkOutDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
     */
    public ai.visma.ssn.type.Candidate.Builder addCheckOutDateBuilder(
        int index) {
      return getCheckOutDateFieldBuilder().addBuilder(
          index, ai.visma.ssn.type.Candidate.getDefaultInstance());
    }
    /**
     * <pre>
     * checkOutDate
     * ISO 8601 date, ie. a string of the format "YYYY-MM-DD"
     * Example: "2019-12-31"
     * </pre>
     *
     * <code>repeated .ssn.type.Candidate check_out_date = 2 [json_name = "checkOutDate"];</code>
     */
    public java.util.List<ai.visma.ssn.type.Candidate.Builder> 
         getCheckOutDateBuilderList() {
      return getCheckOutDateFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        ai.visma.ssn.type.Candidate, ai.visma.ssn.type.Candidate.Builder, ai.visma.ssn.type.CandidateOrBuilder> 
        getCheckOutDateFieldBuilder() {
      if (checkOutDateBuilder_ == null) {
        checkOutDateBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            ai.visma.ssn.type.Candidate, ai.visma.ssn.type.Candidate.Builder, ai.visma.ssn.type.CandidateOrBuilder>(
                checkOutDate_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        checkOutDate_ = null;
      }
      return checkOutDateBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:ssn.type.HotelDates)
  }

  // @@protoc_insertion_point(class_scope:ssn.type.HotelDates)
  private static final ai.visma.ssn.type.HotelDates DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ai.visma.ssn.type.HotelDates();
  }

  public static ai.visma.ssn.type.HotelDates getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<HotelDates>
      PARSER = new com.google.protobuf.AbstractParser<HotelDates>() {
    @java.lang.Override
    public HotelDates parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<HotelDates> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<HotelDates> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public ai.visma.ssn.type.HotelDates getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

